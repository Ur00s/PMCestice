
ProjekatCestice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004a80  08004a80  00014a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b20  08004b20  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004b20  08004b20  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b20  08004b20  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b20  08004b20  00014b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b24  08004b24  00014b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  20000070  08004b98  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08004b98  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa0e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ada  00000000  00000000  0002aaae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002c588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002d030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025bcb  00000000  00000000  0002da00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b23f  00000000  00000000  000535cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8764  00000000  00000000  0005e80a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156f6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fe0  00000000  00000000  00156fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a68 	.word	0x08004a68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004a68 	.word	0x08004a68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <LCD_fun>:
	LCD_fun(0x06,0);
	LCD_fun(0x01,0);
	LCD_fun(0x80,0);
}

void LCD_fun(uint8_t value, uint8_t ind){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	460a      	mov	r2, r1
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	4613      	mov	r3, r2
 80005f6:	71bb      	strb	r3, [r7, #6]

		uint8_t data1;

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, ind);
 80005f8:	79bb      	ldrb	r3, [r7, #6]
 80005fa:	461a      	mov	r2, r3
 80005fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000604:	f002 fa90 	bl	8002b28 <HAL_GPIO_WritePin>

		data1 = value & 0x01;
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, data1);
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	461a      	mov	r2, r3
 8000614:	2140      	movs	r1, #64	; 0x40
 8000616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061a:	f002 fa85 	bl	8002b28 <HAL_GPIO_WritePin>

		data1 = (value >> 1) & 0x01;
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	085b      	lsrs	r3, r3, #1
 8000622:	b2db      	uxtb	r3, r3
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, data1);
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	461a      	mov	r2, r3
 800062e:	2180      	movs	r1, #128	; 0x80
 8000630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000634:	f002 fa78 	bl	8002b28 <HAL_GPIO_WritePin>

		data1 = (value >> 2) & 0x01;
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	089b      	lsrs	r3, r3, #2
 800063c:	b2db      	uxtb	r3, r3
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, data1);
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	461a      	mov	r2, r3
 8000648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f002 fa6a 	bl	8002b28 <HAL_GPIO_WritePin>

		data1 = (value >> 3) & 0x01;
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	08db      	lsrs	r3, r3, #3
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, data1);
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	461a      	mov	r2, r3
 8000664:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066c:	f002 fa5c 	bl	8002b28 <HAL_GPIO_WritePin>

		data1 = (value >> 4) & 0x01;
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	091b      	lsrs	r3, r3, #4
 8000674:	b2db      	uxtb	r3, r3
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, data1);
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	461a      	mov	r2, r3
 8000680:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000688:	f002 fa4e 	bl	8002b28 <HAL_GPIO_WritePin>

		data1 = (value >> 5) & 0x01;
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	095b      	lsrs	r3, r3, #5
 8000690:	b2db      	uxtb	r3, r3
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, data1);
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	461a      	mov	r2, r3
 800069c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a4:	f002 fa40 	bl	8002b28 <HAL_GPIO_WritePin>

		data1 = (value >> 6) & 0x01;
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	099b      	lsrs	r3, r3, #6
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, data1);
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	461a      	mov	r2, r3
 80006b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c0:	f002 fa32 	bl	8002b28 <HAL_GPIO_WritePin>

		data1 = (value >> 7) & 0x01;
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	09db      	lsrs	r3, r3, #7
 80006c8:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, data1);
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	461a      	mov	r2, r3
 80006ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d6:	f002 fa27 	bl	8002b28 <HAL_GPIO_WritePin>


		HAL_GPIO_WritePin(GPIOA, enableLcd, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e4:	f002 fa20 	bl	8002b28 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80006e8:	2005      	movs	r0, #5
 80006ea:	f000 fd43 	bl	8001174 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, enableLcd, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f8:	f002 fa16 	bl	8002b28 <HAL_GPIO_WritePin>
}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <ispis_LCD>:

/* USER CODE END 0 */
void ispis_LCD(char tekst[]){
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

	int i=0;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
	LCD_fun(0x01, 0);
 8000710:	2100      	movs	r1, #0
 8000712:	2001      	movs	r0, #1
 8000714:	f7ff ff68 	bl	80005e8 <LCD_fun>

	while(tekst[i]){
 8000718:	e00a      	b.n	8000730 <ispis_LCD+0x2c>
		LCD_fun(tekst[i],1);
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2101      	movs	r1, #1
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff5f 	bl	80005e8 <LCD_fun>
		i++;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	3301      	adds	r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
	while(tekst[i]){
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d1ee      	bne.n	800071a <ispis_LCD+0x16>
	}
}
 800073c:	bf00      	nop
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <pm_sensor_read_pm1>:

float pm_sensor_read_pm1()
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 800074c:	481d      	ldr	r0, [pc, #116]	; (80007c4 <pm_sensor_read_pm1+0x7c>)
 800074e:	f001 f86f 	bl	8001830 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000752:	f04f 31ff 	mov.w	r1, #4294967295
 8000756:	481b      	ldr	r0, [pc, #108]	; (80007c4 <pm_sensor_read_pm1+0x7c>)
 8000758:	f001 f924 	bl	80019a4 <HAL_ADC_PollForConversion>
	res=HAL_ADC_GetValue(&hadc1);
 800075c:	4819      	ldr	r0, [pc, #100]	; (80007c4 <pm_sensor_read_pm1+0x7c>)
 800075e:	f001 f9f9 	bl	8001b54 <HAL_ADC_GetValue>
 8000762:	4603      	mov	r3, r0
 8000764:	b29a      	uxth	r2, r3
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <pm_sensor_read_pm1+0x80>)
 8000768:	801a      	strh	r2, [r3, #0]

	pm1=res*200/4095;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <pm_sensor_read_pm1+0x80>)
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	461a      	mov	r2, r3
 8000770:	23c8      	movs	r3, #200	; 0xc8
 8000772:	fb02 f303 	mul.w	r3, r2, r3
 8000776:	4a15      	ldr	r2, [pc, #84]	; (80007cc <pm_sensor_read_pm1+0x84>)
 8000778:	fb82 1203 	smull	r1, r2, r2, r3
 800077c:	441a      	add	r2, r3
 800077e:	12d2      	asrs	r2, r2, #11
 8000780:	17db      	asrs	r3, r3, #31
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	ee07 3a90 	vmov	s15, r3
 8000788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <pm_sensor_read_pm1+0x88>)
 800078e:	edc3 7a00 	vstr	s15, [r3]

	HAL_Delay(1000);
 8000792:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000796:	f000 fced 	bl	8001174 <HAL_Delay>
	duzina_poruke = sprintf(buffer, "%u", pm1);
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <pm_sensor_read_pm1+0x88>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff feca 	bl	8000538 <__aeabi_f2d>
 80007a4:	4602      	mov	r2, r0
 80007a6:	460b      	mov	r3, r1
 80007a8:	490a      	ldr	r1, [pc, #40]	; (80007d4 <pm_sensor_read_pm1+0x8c>)
 80007aa:	480b      	ldr	r0, [pc, #44]	; (80007d8 <pm_sensor_read_pm1+0x90>)
 80007ac:	f003 fcee 	bl	800418c <siprintf>
 80007b0:	4603      	mov	r3, r0
 80007b2:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <pm_sensor_read_pm1+0x94>)
 80007b4:	6013      	str	r3, [r2, #0]
	//Slanje podataka
	return pm1;
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <pm_sensor_read_pm1+0x88>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	ee07 3a90 	vmov	s15, r3
}
 80007be:	eeb0 0a67 	vmov.f32	s0, s15
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	2000008c 	.word	0x2000008c
 80007c8:	200003c4 	.word	0x200003c4
 80007cc:	80080081 	.word	0x80080081
 80007d0:	200001b8 	.word	0x200001b8
 80007d4:	08004a80 	.word	0x08004a80
 80007d8:	200001c4 	.word	0x200001c4
 80007dc:	200003c8 	.word	0x200003c8

080007e0 <pm_sensor_read_pm25>:

float pm_sensor_read_pm25()
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 80007e4:	481d      	ldr	r0, [pc, #116]	; (800085c <pm_sensor_read_pm25+0x7c>)
 80007e6:	f001 f823 	bl	8001830 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80007ea:	f04f 31ff 	mov.w	r1, #4294967295
 80007ee:	481b      	ldr	r0, [pc, #108]	; (800085c <pm_sensor_read_pm25+0x7c>)
 80007f0:	f001 f8d8 	bl	80019a4 <HAL_ADC_PollForConversion>
	res=HAL_ADC_GetValue(&hadc2);
 80007f4:	4819      	ldr	r0, [pc, #100]	; (800085c <pm_sensor_read_pm25+0x7c>)
 80007f6:	f001 f9ad 	bl	8001b54 <HAL_ADC_GetValue>
 80007fa:	4603      	mov	r3, r0
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <pm_sensor_read_pm25+0x80>)
 8000800:	801a      	strh	r2, [r3, #0]

	pm2_5=res*200/4095;
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <pm_sensor_read_pm25+0x80>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	23c8      	movs	r3, #200	; 0xc8
 800080a:	fb02 f303 	mul.w	r3, r2, r3
 800080e:	4a15      	ldr	r2, [pc, #84]	; (8000864 <pm_sensor_read_pm25+0x84>)
 8000810:	fb82 1203 	smull	r1, r2, r2, r3
 8000814:	441a      	add	r2, r3
 8000816:	12d2      	asrs	r2, r2, #11
 8000818:	17db      	asrs	r3, r3, #31
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	ee07 3a90 	vmov	s15, r3
 8000820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <pm_sensor_read_pm25+0x88>)
 8000826:	edc3 7a00 	vstr	s15, [r3]

	HAL_Delay(1000);
 800082a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800082e:	f000 fca1 	bl	8001174 <HAL_Delay>
	duzina_poruke = sprintf(buffer, "%u", pm2_5);
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <pm_sensor_read_pm25+0x88>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fe7e 	bl	8000538 <__aeabi_f2d>
 800083c:	4602      	mov	r2, r0
 800083e:	460b      	mov	r3, r1
 8000840:	490a      	ldr	r1, [pc, #40]	; (800086c <pm_sensor_read_pm25+0x8c>)
 8000842:	480b      	ldr	r0, [pc, #44]	; (8000870 <pm_sensor_read_pm25+0x90>)
 8000844:	f003 fca2 	bl	800418c <siprintf>
 8000848:	4603      	mov	r3, r0
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <pm_sensor_read_pm25+0x94>)
 800084c:	6013      	str	r3, [r2, #0]
	//Slanje podataka
	return pm2_5;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <pm_sensor_read_pm25+0x88>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	ee07 3a90 	vmov	s15, r3
}
 8000856:	eeb0 0a67 	vmov.f32	s0, s15
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200000f0 	.word	0x200000f0
 8000860:	200003c4 	.word	0x200003c4
 8000864:	80080081 	.word	0x80080081
 8000868:	200001bc 	.word	0x200001bc
 800086c:	08004a80 	.word	0x08004a80
 8000870:	200001c4 	.word	0x200001c4
 8000874:	200003c8 	.word	0x200003c8

08000878 <pm_sensor_read_pm10>:

float pm_sensor_read_pm10()
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc3);
 800087c:	481d      	ldr	r0, [pc, #116]	; (80008f4 <pm_sensor_read_pm10+0x7c>)
 800087e:	f000 ffd7 	bl	8001830 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8000882:	f04f 31ff 	mov.w	r1, #4294967295
 8000886:	481b      	ldr	r0, [pc, #108]	; (80008f4 <pm_sensor_read_pm10+0x7c>)
 8000888:	f001 f88c 	bl	80019a4 <HAL_ADC_PollForConversion>
	res=HAL_ADC_GetValue(&hadc3);
 800088c:	4819      	ldr	r0, [pc, #100]	; (80008f4 <pm_sensor_read_pm10+0x7c>)
 800088e:	f001 f961 	bl	8001b54 <HAL_ADC_GetValue>
 8000892:	4603      	mov	r3, r0
 8000894:	b29a      	uxth	r2, r3
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <pm_sensor_read_pm10+0x80>)
 8000898:	801a      	strh	r2, [r3, #0]

	pm10=res*200/4095;
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <pm_sensor_read_pm10+0x80>)
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	461a      	mov	r2, r3
 80008a0:	23c8      	movs	r3, #200	; 0xc8
 80008a2:	fb02 f303 	mul.w	r3, r2, r3
 80008a6:	4a15      	ldr	r2, [pc, #84]	; (80008fc <pm_sensor_read_pm10+0x84>)
 80008a8:	fb82 1203 	smull	r1, r2, r2, r3
 80008ac:	441a      	add	r2, r3
 80008ae:	12d2      	asrs	r2, r2, #11
 80008b0:	17db      	asrs	r3, r3, #31
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	ee07 3a90 	vmov	s15, r3
 80008b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <pm_sensor_read_pm10+0x88>)
 80008be:	edc3 7a00 	vstr	s15, [r3]

	HAL_Delay(1000);
 80008c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c6:	f000 fc55 	bl	8001174 <HAL_Delay>
	duzina_poruke = sprintf(buffer, "%u", pm10);
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <pm_sensor_read_pm10+0x88>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fe32 	bl	8000538 <__aeabi_f2d>
 80008d4:	4602      	mov	r2, r0
 80008d6:	460b      	mov	r3, r1
 80008d8:	490a      	ldr	r1, [pc, #40]	; (8000904 <pm_sensor_read_pm10+0x8c>)
 80008da:	480b      	ldr	r0, [pc, #44]	; (8000908 <pm_sensor_read_pm10+0x90>)
 80008dc:	f003 fc56 	bl	800418c <siprintf>
 80008e0:	4603      	mov	r3, r0
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <pm_sensor_read_pm10+0x94>)
 80008e4:	6013      	str	r3, [r2, #0]
	//Slanje podataka
	return pm10;
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <pm_sensor_read_pm10+0x88>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	ee07 3a90 	vmov	s15, r3
}
 80008ee:	eeb0 0a67 	vmov.f32	s0, s15
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000154 	.word	0x20000154
 80008f8:	200003c4 	.word	0x200003c4
 80008fc:	80080081 	.word	0x80080081
 8000900:	200001c0 	.word	0x200001c0
 8000904:	08004a80 	.word	0x08004a80
 8000908:	200001c4 	.word	0x200001c4
 800090c:	200003c8 	.word	0x200003c8

08000910 <loop>:
    lorawan_set_app_eui(APP_EUI);
    lorawan_set_app_key(APP_KEY);
}
*/

void loop() {
 8000910:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000914:	b0b0      	sub	sp, #192	; 0xc0
 8000916:	af06      	add	r7, sp, #24
    // Read PM sensor values
    float pm1_value = pm_sensor_read_pm1();
 8000918:	f7ff ff16 	bl	8000748 <pm_sensor_read_pm1>
 800091c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
    float pm25_value = pm_sensor_read_pm25();
 8000920:	f7ff ff5e 	bl	80007e0 <pm_sensor_read_pm25>
 8000924:	ed87 0a28 	vstr	s0, [r7, #160]	; 0xa0
    float pm10_value = pm_sensor_read_pm10();
 8000928:	f7ff ffa6 	bl	8000878 <pm_sensor_read_pm10>
 800092c:	ed87 0a27 	vstr	s0, [r7, #156]	; 0x9c

    // Convert PM values to payload format (JSON)
    char payload[150];
    sprintf(payload, sizeof(payload), "{\"PM1\":%.2f,\"PM2.5\":%.2f,\"PM10\":%.2f}", pm1_value, pm25_value, pm10_value);
 8000930:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000934:	f7ff fe00 	bl	8000538 <__aeabi_f2d>
 8000938:	4604      	mov	r4, r0
 800093a:	460d      	mov	r5, r1
 800093c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8000940:	f7ff fdfa 	bl	8000538 <__aeabi_f2d>
 8000944:	4680      	mov	r8, r0
 8000946:	4689      	mov	r9, r1
 8000948:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800094c:	f7ff fdf4 	bl	8000538 <__aeabi_f2d>
 8000950:	4602      	mov	r2, r0
 8000952:	460b      	mov	r3, r1
 8000954:	1d38      	adds	r0, r7, #4
 8000956:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800095a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800095e:	e9cd 4500 	strd	r4, r5, [sp]
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <loop+0x74>)
 8000964:	2196      	movs	r1, #150	; 0x96
 8000966:	f003 fc11 	bl	800418c <siprintf>
    // Send payload if joined
    //if (lorawan_is_joined()) {
    //    lorawan_send_payload(payload);
    //}

    ispis_LCD(payload);
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fec9 	bl	8000704 <ispis_LCD>

    // Sleep or wait for next cycle
    HAL_Delay(10000); // 10 seconds delay
 8000972:	f242 7010 	movw	r0, #10000	; 0x2710
 8000976:	f000 fbfd 	bl	8001174 <HAL_Delay>
}
 800097a:	bf00      	nop
 800097c:	37a8      	adds	r7, #168	; 0xa8
 800097e:	46bd      	mov	sp, r7
 8000980:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000984:	08004a84 	.word	0x08004a84

08000988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098c:	f000 fb7d 	bl	800108a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000990:	f000 f80d 	bl	80009ae <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000994:	f000 f851 	bl	8000a3a <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000998:	f000 f9be 	bl	8000d18 <MX_GPIO_Init>
  MX_ADC1_Init();
 800099c:	f000 f878 	bl	8000a90 <MX_ADC1_Init>
  MX_ADC2_Init();
 80009a0:	f000 f8ee 	bl	8000b80 <MX_ADC2_Init>
  MX_ADC3_Init();
 80009a4:	f000 f952 	bl	8000c4c <MX_ADC3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  loop();
 80009a8:	f7ff ffb2 	bl	8000910 <loop>
 80009ac:	e7fc      	b.n	80009a8 <main+0x20>

080009ae <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b096      	sub	sp, #88	; 0x58
 80009b2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2244      	movs	r2, #68	; 0x44
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 fbdd 	bl	800417c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c2:	463b      	mov	r3, r7
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009d4:	f002 f8ce 	bl	8002b74 <HAL_PWREx_ControlVoltageScaling>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009de:	f000 f9db 	bl	8000d98 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009e2:	2310      	movs	r3, #16
 80009e4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009e6:	2301      	movs	r3, #1
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009ee:	2360      	movs	r3, #96	; 0x60
 80009f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4618      	mov	r0, r3
 80009fc:	f002 f910 	bl	8002c20 <HAL_RCC_OscConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000a06:	f000 f9c7 	bl	8000d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a1e:	463b      	mov	r3, r7
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f002 fcd8 	bl	80033d8 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a2e:	f000 f9b3 	bl	8000d98 <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3758      	adds	r7, #88	; 0x58
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b0a2      	sub	sp, #136	; 0x88
 8000a3e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a40:	463b      	mov	r3, r7
 8000a42:	2288      	movs	r2, #136	; 0x88
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f003 fb98 	bl	800417c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a50:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a56:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a60:	2308      	movs	r3, #8
 8000a62:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a64:	2307      	movs	r3, #7
 8000a66:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a74:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a76:	463b      	mov	r3, r7
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f002 fe99 	bl	80037b0 <HAL_RCCEx_PeriphCLKConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000a84:	f000 f988 	bl	8000d98 <Error_Handler>
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3788      	adds	r7, #136	; 0x88
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
 8000ab0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ab2:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <MX_ADC1_Init+0xe0>)
 8000ab4:	4a2f      	ldr	r2, [pc, #188]	; (8000b74 <MX_ADC1_Init+0xe4>)
 8000ab6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ab8:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <MX_ADC1_Init+0xe0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000abe:	4b2c      	ldr	r3, [pc, #176]	; (8000b70 <MX_ADC1_Init+0xe0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac4:	4b2a      	ldr	r3, [pc, #168]	; (8000b70 <MX_ADC1_Init+0xe0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aca:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <MX_ADC1_Init+0xe0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ad0:	4b27      	ldr	r3, [pc, #156]	; (8000b70 <MX_ADC1_Init+0xe0>)
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <MX_ADC1_Init+0xe0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000adc:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <MX_ADC1_Init+0xe0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ae2:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <MX_ADC1_Init+0xe0>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ae8:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <MX_ADC1_Init+0xe0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000af0:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <MX_ADC1_Init+0xe0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000af6:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <MX_ADC1_Init+0xe0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000afc:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <MX_ADC1_Init+0xe0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b04:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <MX_ADC1_Init+0xe0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b0a:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <MX_ADC1_Init+0xe0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b12:	4817      	ldr	r0, [pc, #92]	; (8000b70 <MX_ADC1_Init+0xe0>)
 8000b14:	f000 fd36 	bl	8001584 <HAL_ADC_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000b1e:	f000 f93b 	bl	8000d98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4810      	ldr	r0, [pc, #64]	; (8000b70 <MX_ADC1_Init+0xe0>)
 8000b2e:	f001 fcbb 	bl	80024a8 <HAL_ADCEx_MultiModeConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b38:	f000 f92e 	bl	8000d98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_ADC1_Init+0xe8>)
 8000b3e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b40:	2306      	movs	r3, #6
 8000b42:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_ADC1_Init+0xec>)
 8000b4a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_ADC1_Init+0xe0>)
 8000b5a:	f001 f809 	bl	8001b70 <HAL_ADC_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000b64:	f000 f918 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	2000008c 	.word	0x2000008c
 8000b74:	50040000 	.word	0x50040000
 8000b78:	04300002 	.word	0x04300002
 8000b7c:	407f0000 	.word	0x407f0000

08000b80 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b86:	463b      	mov	r3, r7
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
 8000b94:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b96:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <MX_ADC2_Init+0xbc>)
 8000b98:	4a29      	ldr	r2, [pc, #164]	; (8000c40 <MX_ADC2_Init+0xc0>)
 8000b9a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b9c:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <MX_ADC2_Init+0xbc>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ba2:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <MX_ADC2_Init+0xbc>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba8:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <MX_ADC2_Init+0xbc>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bae:	4b23      	ldr	r3, [pc, #140]	; (8000c3c <MX_ADC2_Init+0xbc>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bb4:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <MX_ADC2_Init+0xbc>)
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000bba:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <MX_ADC2_Init+0xbc>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <MX_ADC2_Init+0xbc>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_ADC2_Init+0xbc>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <MX_ADC2_Init+0xbc>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <MX_ADC2_Init+0xbc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_ADC2_Init+0xbc>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000be0:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <MX_ADC2_Init+0xbc>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_ADC2_Init+0xbc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <MX_ADC2_Init+0xbc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bf6:	4811      	ldr	r0, [pc, #68]	; (8000c3c <MX_ADC2_Init+0xbc>)
 8000bf8:	f000 fcc4 	bl	8001584 <HAL_ADC_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000c02:	f000 f8c9 	bl	8000d98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_ADC2_Init+0xc4>)
 8000c08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c0a:	2306      	movs	r3, #6
 8000c0c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <MX_ADC2_Init+0xc8>)
 8000c14:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c16:	2304      	movs	r3, #4
 8000c18:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c1e:	463b      	mov	r3, r7
 8000c20:	4619      	mov	r1, r3
 8000c22:	4806      	ldr	r0, [pc, #24]	; (8000c3c <MX_ADC2_Init+0xbc>)
 8000c24:	f000 ffa4 	bl	8001b70 <HAL_ADC_ConfigChannel>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000c2e:	f000 f8b3 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200000f0 	.word	0x200000f0
 8000c40:	50040100 	.word	0x50040100
 8000c44:	04300002 	.word	0x04300002
 8000c48:	407f0000 	.word	0x407f0000

08000c4c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c52:	463b      	mov	r3, r7
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
 8000c60:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000c62:	4b29      	ldr	r3, [pc, #164]	; (8000d08 <MX_ADC3_Init+0xbc>)
 8000c64:	4a29      	ldr	r2, [pc, #164]	; (8000d0c <MX_ADC3_Init+0xc0>)
 8000c66:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c68:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <MX_ADC3_Init+0xbc>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c6e:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <MX_ADC3_Init+0xbc>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c74:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <MX_ADC3_Init+0xbc>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c7a:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <MX_ADC3_Init+0xbc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c80:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <MX_ADC3_Init+0xbc>)
 8000c82:	2204      	movs	r2, #4
 8000c84:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c86:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <MX_ADC3_Init+0xbc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <MX_ADC3_Init+0xbc>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000c92:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <MX_ADC3_Init+0xbc>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <MX_ADC3_Init+0xbc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca0:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <MX_ADC3_Init+0xbc>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <MX_ADC3_Init+0xbc>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <MX_ADC3_Init+0xbc>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <MX_ADC3_Init+0xbc>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <MX_ADC3_Init+0xbc>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000cc2:	4811      	ldr	r0, [pc, #68]	; (8000d08 <MX_ADC3_Init+0xbc>)
 8000cc4:	f000 fc5e 	bl	8001584 <HAL_ADC_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000cce:	f000 f863 	bl	8000d98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_ADC3_Init+0xc4>)
 8000cd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd6:	2306      	movs	r3, #6
 8000cd8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <MX_ADC3_Init+0xc8>)
 8000ce0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cea:	463b      	mov	r3, r7
 8000cec:	4619      	mov	r1, r3
 8000cee:	4806      	ldr	r0, [pc, #24]	; (8000d08 <MX_ADC3_Init+0xbc>)
 8000cf0:	f000 ff3e 	bl	8001b70 <HAL_ADC_ConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000cfa:	f000 f84d 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000154 	.word	0x20000154
 8000d0c:	50040200 	.word	0x50040200
 8000d10:	04300002 	.word	0x04300002
 8000d14:	407f0000 	.word	0x407f0000

08000d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <MX_GPIO_Init+0x7c>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	4a18      	ldr	r2, [pc, #96]	; (8000d94 <MX_GPIO_Init+0x7c>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3a:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <MX_GPIO_Init+0x7c>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <MX_GPIO_Init+0x7c>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <MX_GPIO_Init+0x7c>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <MX_GPIO_Init+0x7c>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f641 717f 	movw	r1, #8063	; 0x1f7f
 8000d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d68:	f001 fede 	bl	8002b28 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA8
                           PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d6c:	f641 737f 	movw	r3, #8063	; 0x1f7f
 8000d70:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	4619      	mov	r1, r3
 8000d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d88:	f001 fd24 	bl	80027d4 <HAL_GPIO_Init>

}
 8000d8c:	bf00      	nop
 8000d8e:	3720      	adds	r7, #32
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40021000 	.word	0x40021000

08000d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9c:	b672      	cpsid	i
}
 8000d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <Error_Handler+0x8>
	...

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <HAL_MspInit+0x44>)
 8000dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dae:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <HAL_MspInit+0x44>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6613      	str	r3, [r2, #96]	; 0x60
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <HAL_MspInit+0x44>)
 8000db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_MspInit+0x44>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc6:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <HAL_MspInit+0x44>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_MspInit+0x44>)
 8000dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000

08000dec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08e      	sub	sp, #56	; 0x38
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a4c      	ldr	r2, [pc, #304]	; (8000f3c <HAL_ADC_MspInit+0x150>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d12d      	bne.n	8000e6a <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000e0e:	4b4c      	ldr	r3, [pc, #304]	; (8000f40 <HAL_ADC_MspInit+0x154>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	3301      	adds	r3, #1
 8000e14:	4a4a      	ldr	r2, [pc, #296]	; (8000f40 <HAL_ADC_MspInit+0x154>)
 8000e16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000e18:	4b49      	ldr	r3, [pc, #292]	; (8000f40 <HAL_ADC_MspInit+0x154>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d10b      	bne.n	8000e38 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000e20:	4b48      	ldr	r3, [pc, #288]	; (8000f44 <HAL_ADC_MspInit+0x158>)
 8000e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e24:	4a47      	ldr	r2, [pc, #284]	; (8000f44 <HAL_ADC_MspInit+0x158>)
 8000e26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2c:	4b45      	ldr	r3, [pc, #276]	; (8000f44 <HAL_ADC_MspInit+0x158>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e34:	623b      	str	r3, [r7, #32]
 8000e36:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e38:	4b42      	ldr	r3, [pc, #264]	; (8000f44 <HAL_ADC_MspInit+0x158>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3c:	4a41      	ldr	r2, [pc, #260]	; (8000f44 <HAL_ADC_MspInit+0x158>)
 8000e3e:	f043 0304 	orr.w	r3, r3, #4
 8000e42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e44:	4b3f      	ldr	r3, [pc, #252]	; (8000f44 <HAL_ADC_MspInit+0x158>)
 8000e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	61fb      	str	r3, [r7, #28]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e50:	2303      	movs	r3, #3
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e54:	230b      	movs	r3, #11
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e60:	4619      	mov	r1, r3
 8000e62:	4839      	ldr	r0, [pc, #228]	; (8000f48 <HAL_ADC_MspInit+0x15c>)
 8000e64:	f001 fcb6 	bl	80027d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000e68:	e064      	b.n	8000f34 <HAL_ADC_MspInit+0x148>
  else if(hadc->Instance==ADC2)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a37      	ldr	r2, [pc, #220]	; (8000f4c <HAL_ADC_MspInit+0x160>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d12d      	bne.n	8000ed0 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000e74:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <HAL_ADC_MspInit+0x154>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	4a31      	ldr	r2, [pc, #196]	; (8000f40 <HAL_ADC_MspInit+0x154>)
 8000e7c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000e7e:	4b30      	ldr	r3, [pc, #192]	; (8000f40 <HAL_ADC_MspInit+0x154>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d10b      	bne.n	8000e9e <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000e86:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <HAL_ADC_MspInit+0x158>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	4a2e      	ldr	r2, [pc, #184]	; (8000f44 <HAL_ADC_MspInit+0x158>)
 8000e8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e92:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <HAL_ADC_MspInit+0x158>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e9a:	61bb      	str	r3, [r7, #24]
 8000e9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <HAL_ADC_MspInit+0x158>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	4a28      	ldr	r2, [pc, #160]	; (8000f44 <HAL_ADC_MspInit+0x158>)
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <HAL_ADC_MspInit+0x158>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000eba:	230b      	movs	r3, #11
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	481f      	ldr	r0, [pc, #124]	; (8000f48 <HAL_ADC_MspInit+0x15c>)
 8000eca:	f001 fc83 	bl	80027d4 <HAL_GPIO_Init>
}
 8000ece:	e031      	b.n	8000f34 <HAL_ADC_MspInit+0x148>
  else if(hadc->Instance==ADC3)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a1e      	ldr	r2, [pc, #120]	; (8000f50 <HAL_ADC_MspInit+0x164>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d12c      	bne.n	8000f34 <HAL_ADC_MspInit+0x148>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <HAL_ADC_MspInit+0x154>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a17      	ldr	r2, [pc, #92]	; (8000f40 <HAL_ADC_MspInit+0x154>)
 8000ee2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000ee4:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <HAL_ADC_MspInit+0x154>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d10b      	bne.n	8000f04 <HAL_ADC_MspInit+0x118>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_ADC_MspInit+0x158>)
 8000eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef0:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <HAL_ADC_MspInit+0x158>)
 8000ef2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ef6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_ADC_MspInit+0x158>)
 8000efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <HAL_ADC_MspInit+0x158>)
 8000f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f08:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <HAL_ADC_MspInit+0x158>)
 8000f0a:	f043 0304 	orr.w	r3, r3, #4
 8000f0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <HAL_ADC_MspInit+0x158>)
 8000f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f1c:	2307      	movs	r3, #7
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f20:	230b      	movs	r3, #11
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4806      	ldr	r0, [pc, #24]	; (8000f48 <HAL_ADC_MspInit+0x15c>)
 8000f30:	f001 fc50 	bl	80027d4 <HAL_GPIO_Init>
}
 8000f34:	bf00      	nop
 8000f36:	3738      	adds	r7, #56	; 0x38
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	50040000 	.word	0x50040000
 8000f40:	200003cc 	.word	0x200003cc
 8000f44:	40021000 	.word	0x40021000
 8000f48:	48000800 	.word	0x48000800
 8000f4c:	50040100 	.word	0x50040100
 8000f50:	50040200 	.word	0x50040200

08000f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <NMI_Handler+0x4>

08000f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <HardFault_Handler+0x4>

08000f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <MemManage_Handler+0x4>

08000f66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa0:	f000 f8c8 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb0:	4a14      	ldr	r2, [pc, #80]	; (8001004 <_sbrk+0x5c>)
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <_sbrk+0x60>)
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <_sbrk+0x64>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <_sbrk+0x68>)
 8000fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d207      	bcs.n	8000fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd8:	f003 f8a6 	bl	8004128 <__errno>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	220c      	movs	r2, #12
 8000fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	e009      	b.n	8000ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <_sbrk+0x64>)
 8000ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20018000 	.word	0x20018000
 8001008:	00000400 	.word	0x00000400
 800100c:	200003d0 	.word	0x200003d0
 8001010:	200003e8 	.word	0x200003e8

08001014 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <SystemInit+0x20>)
 800101a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <SystemInit+0x20>)
 8001020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001070 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800103c:	f7ff ffea 	bl	8001014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <LoopForever+0x6>)
  ldr r1, =_edata
 8001042:	490d      	ldr	r1, [pc, #52]	; (8001078 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <LoopForever+0xe>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001048:	e002      	b.n	8001050 <LoopCopyDataInit>

0800104a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800104c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104e:	3304      	adds	r3, #4

08001050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001054:	d3f9      	bcc.n	800104a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001058:	4c0a      	ldr	r4, [pc, #40]	; (8001084 <LoopForever+0x16>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800105c:	e001      	b.n	8001062 <LoopFillZerobss>

0800105e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001060:	3204      	adds	r2, #4

08001062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001064:	d3fb      	bcc.n	800105e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001066:	f003 f865 	bl	8004134 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800106a:	f7ff fc8d 	bl	8000988 <main>

0800106e <LoopForever>:

LoopForever:
    b LoopForever
 800106e:	e7fe      	b.n	800106e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001070:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001078:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800107c:	08004b28 	.word	0x08004b28
  ldr r2, =_sbss
 8001080:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001084:	200003e8 	.word	0x200003e8

08001088 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC1_2_IRQHandler>

0800108a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001094:	2003      	movs	r0, #3
 8001096:	f001 fb69 	bl	800276c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800109a:	200f      	movs	r0, #15
 800109c:	f000 f80e 	bl	80010bc <HAL_InitTick>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	71fb      	strb	r3, [r7, #7]
 80010aa:	e001      	b.n	80010b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ac:	f7ff fe7a 	bl	8000da4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010b0:	79fb      	ldrb	r3, [r7, #7]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <HAL_InitTick+0x6c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d023      	beq.n	8001118 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <HAL_InitTick+0x70>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HAL_InitTick+0x6c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010de:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 fb67 	bl	80027ba <HAL_SYSTICK_Config>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10f      	bne.n	8001112 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b0f      	cmp	r3, #15
 80010f6:	d809      	bhi.n	800110c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f8:	2200      	movs	r2, #0
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	f001 fb3f 	bl	8002782 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001104:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <HAL_InitTick+0x74>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e007      	b.n	800111c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	e004      	b.n	800111c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	73fb      	strb	r3, [r7, #15]
 8001116:	e001      	b.n	800111c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	20000000 	.word	0x20000000
 8001130:	20000004 	.word	0x20000004

08001134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_IncTick+0x20>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_IncTick+0x24>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <HAL_IncTick+0x24>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000008 	.word	0x20000008
 8001158:	200003d4 	.word	0x200003d4

0800115c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return uwTick;
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <HAL_GetTick+0x14>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	200003d4 	.word	0x200003d4

08001174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff ffee 	bl	800115c <HAL_GetTick>
 8001180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800118c:	d005      	beq.n	800119a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <HAL_Delay+0x44>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800119a:	bf00      	nop
 800119c:	f7ff ffde 	bl	800115c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d8f7      	bhi.n	800119c <HAL_Delay+0x28>
  {
  }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000008 	.word	0x20000008

080011bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	431a      	orrs	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	609a      	str	r2, [r3, #8]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	609a      	str	r2, [r3, #8]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001218:	4618      	mov	r0, r3
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001224:	b480      	push	{r7}
 8001226:	b087      	sub	sp, #28
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	3360      	adds	r3, #96	; 0x60
 8001236:	461a      	mov	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <LL_ADC_SetOffset+0x44>)
 8001246:	4013      	ands	r3, r2
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	430a      	orrs	r2, r1
 8001252:	4313      	orrs	r3, r2
 8001254:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800125c:	bf00      	nop
 800125e:	371c      	adds	r7, #28
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	03fff000 	.word	0x03fff000

0800126c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3360      	adds	r3, #96	; 0x60
 800127a:	461a      	mov	r2, r3
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800128c:	4618      	mov	r0, r3
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001298:	b480      	push	{r7}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3360      	adds	r3, #96	; 0x60
 80012a8:	461a      	mov	r2, r3
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	431a      	orrs	r2, r3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012c2:	bf00      	nop
 80012c4:	371c      	adds	r7, #28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3330      	adds	r3, #48	; 0x30
 8001304:	461a      	mov	r2, r3
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	f003 030c 	and.w	r3, r3, #12
 8001310:	4413      	add	r3, r2
 8001312:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	f003 031f 	and.w	r3, r3, #31
 800131e:	211f      	movs	r1, #31
 8001320:	fa01 f303 	lsl.w	r3, r1, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	401a      	ands	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	0e9b      	lsrs	r3, r3, #26
 800132c:	f003 011f 	and.w	r1, r3, #31
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	f003 031f 	and.w	r3, r3, #31
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	431a      	orrs	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001340:	bf00      	nop
 8001342:	371c      	adds	r7, #28
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800134c:	b480      	push	{r7}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3314      	adds	r3, #20
 800135c:	461a      	mov	r2, r3
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	0e5b      	lsrs	r3, r3, #25
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	4413      	add	r3, r2
 800136a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	0d1b      	lsrs	r3, r3, #20
 8001374:	f003 031f 	and.w	r3, r3, #31
 8001378:	2107      	movs	r1, #7
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	401a      	ands	r2, r3
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	0d1b      	lsrs	r3, r3, #20
 8001386:	f003 031f 	and.w	r3, r3, #31
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	fa01 f303 	lsl.w	r3, r1, r3
 8001390:	431a      	orrs	r2, r3
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001396:	bf00      	nop
 8001398:	371c      	adds	r7, #28
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013bc:	43db      	mvns	r3, r3
 80013be:	401a      	ands	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f003 0318 	and.w	r3, r3, #24
 80013c6:	4908      	ldr	r1, [pc, #32]	; (80013e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013c8:	40d9      	lsrs	r1, r3
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	400b      	ands	r3, r1
 80013ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013d2:	431a      	orrs	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	0007ffff 	.word	0x0007ffff

080013ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 031f 	and.w	r3, r3, #31
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001434:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6093      	str	r3, [r2, #8]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800145c:	d101      	bne.n	8001462 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001480:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001484:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014ac:	d101      	bne.n	80014b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014d4:	f043 0201 	orr.w	r2, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <LL_ADC_IsEnabled+0x18>
 80014fc:	2301      	movs	r3, #1
 80014fe:	e000      	b.n	8001502 <LL_ADC_IsEnabled+0x1a>
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800151e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001522:	f043 0204 	orr.w	r2, r3, #4
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b04      	cmp	r3, #4
 8001548:	d101      	bne.n	800154e <LL_ADC_REG_IsConversionOngoing+0x18>
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	2b08      	cmp	r3, #8
 800156e:	d101      	bne.n	8001574 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e136      	b.n	800180c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d109      	bne.n	80015c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff fc1d 	bl	8000dec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff3f 	bl	8001448 <LL_ADC_IsDeepPowerDownEnabled>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d004      	beq.n	80015da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff25 	bl	8001424 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ff5a 	bl	8001498 <LL_ADC_IsInternalRegulatorEnabled>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d115      	bne.n	8001616 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff3e 	bl	8001470 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015f4:	4b87      	ldr	r3, [pc, #540]	; (8001814 <HAL_ADC_Init+0x290>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	099b      	lsrs	r3, r3, #6
 80015fa:	4a87      	ldr	r2, [pc, #540]	; (8001818 <HAL_ADC_Init+0x294>)
 80015fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001600:	099b      	lsrs	r3, r3, #6
 8001602:	3301      	adds	r3, #1
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001608:	e002      	b.n	8001610 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	3b01      	subs	r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f9      	bne.n	800160a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff3c 	bl	8001498 <LL_ADC_IsInternalRegulatorEnabled>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10d      	bne.n	8001642 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162a:	f043 0210 	orr.w	r2, r3, #16
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	f043 0201 	orr.w	r2, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff75 	bl	8001536 <LL_ADC_REG_IsConversionOngoing>
 800164c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001652:	f003 0310 	and.w	r3, r3, #16
 8001656:	2b00      	cmp	r3, #0
 8001658:	f040 80cf 	bne.w	80017fa <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	2b00      	cmp	r3, #0
 8001660:	f040 80cb 	bne.w	80017fa <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001668:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800166c:	f043 0202 	orr.w	r2, r3, #2
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff35 	bl	80014e8 <LL_ADC_IsEnabled>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d115      	bne.n	80016b0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001684:	4865      	ldr	r0, [pc, #404]	; (800181c <HAL_ADC_Init+0x298>)
 8001686:	f7ff ff2f 	bl	80014e8 <LL_ADC_IsEnabled>
 800168a:	4604      	mov	r4, r0
 800168c:	4864      	ldr	r0, [pc, #400]	; (8001820 <HAL_ADC_Init+0x29c>)
 800168e:	f7ff ff2b 	bl	80014e8 <LL_ADC_IsEnabled>
 8001692:	4603      	mov	r3, r0
 8001694:	431c      	orrs	r4, r3
 8001696:	4863      	ldr	r0, [pc, #396]	; (8001824 <HAL_ADC_Init+0x2a0>)
 8001698:	f7ff ff26 	bl	80014e8 <LL_ADC_IsEnabled>
 800169c:	4603      	mov	r3, r0
 800169e:	4323      	orrs	r3, r4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d105      	bne.n	80016b0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4619      	mov	r1, r3
 80016aa:	485f      	ldr	r0, [pc, #380]	; (8001828 <HAL_ADC_Init+0x2a4>)
 80016ac:	f7ff fd86 	bl	80011bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7e5b      	ldrb	r3, [r3, #25]
 80016b4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016ba:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80016c0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80016c6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ce:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d106      	bne.n	80016ec <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	3b01      	subs	r3, #1
 80016e4:	045b      	lsls	r3, r3, #17
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d009      	beq.n	8001708 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	4b47      	ldr	r3, [pc, #284]	; (800182c <HAL_ADC_Init+0x2a8>)
 8001710:	4013      	ands	r3, r2
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	69b9      	ldr	r1, [r7, #24]
 8001718:	430b      	orrs	r3, r1
 800171a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff08 	bl	8001536 <LL_ADC_REG_IsConversionOngoing>
 8001726:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff15 	bl	800155c <LL_ADC_INJ_IsConversionOngoing>
 8001732:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d13d      	bne.n	80017b6 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d13a      	bne.n	80017b6 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001744:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800174c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800175c:	f023 0302 	bic.w	r3, r3, #2
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	69b9      	ldr	r1, [r7, #24]
 8001766:	430b      	orrs	r3, r1
 8001768:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001770:	2b01      	cmp	r3, #1
 8001772:	d118      	bne.n	80017a6 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800177e:	f023 0304 	bic.w	r3, r3, #4
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800178a:	4311      	orrs	r1, r2
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001790:	4311      	orrs	r1, r2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001796:	430a      	orrs	r2, r1
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	611a      	str	r2, [r3, #16]
 80017a4:	e007      	b.n	80017b6 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	691a      	ldr	r2, [r3, #16]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0201 	bic.w	r2, r2, #1
 80017b4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d10c      	bne.n	80017d8 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	f023 010f 	bic.w	r1, r3, #15
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	1e5a      	subs	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	631a      	str	r2, [r3, #48]	; 0x30
 80017d6:	e007      	b.n	80017e8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 020f 	bic.w	r2, r2, #15
 80017e6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ec:	f023 0303 	bic.w	r3, r3, #3
 80017f0:	f043 0201 	orr.w	r2, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	655a      	str	r2, [r3, #84]	; 0x54
 80017f8:	e007      	b.n	800180a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fe:	f043 0210 	orr.w	r2, r3, #16
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800180a:	7ffb      	ldrb	r3, [r7, #31]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3724      	adds	r7, #36	; 0x24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd90      	pop	{r4, r7, pc}
 8001814:	20000000 	.word	0x20000000
 8001818:	053e2d63 	.word	0x053e2d63
 800181c:	50040000 	.word	0x50040000
 8001820:	50040100 	.word	0x50040100
 8001824:	50040200 	.word	0x50040200
 8001828:	50040300 	.word	0x50040300
 800182c:	fff0c007 	.word	0xfff0c007

08001830 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001838:	4857      	ldr	r0, [pc, #348]	; (8001998 <HAL_ADC_Start+0x168>)
 800183a:	f7ff fdd7 	bl	80013ec <LL_ADC_GetMultimode>
 800183e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fe76 	bl	8001536 <LL_ADC_REG_IsConversionOngoing>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	f040 809c 	bne.w	800198a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001858:	2b01      	cmp	r3, #1
 800185a:	d101      	bne.n	8001860 <HAL_ADC_Start+0x30>
 800185c:	2302      	movs	r3, #2
 800185e:	e097      	b.n	8001990 <HAL_ADC_Start+0x160>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 fd71 	bl	8002350 <ADC_Enable>
 800186e:	4603      	mov	r3, r0
 8001870:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001872:	7dfb      	ldrb	r3, [r7, #23]
 8001874:	2b00      	cmp	r3, #0
 8001876:	f040 8083 	bne.w	8001980 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001882:	f023 0301 	bic.w	r3, r3, #1
 8001886:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a42      	ldr	r2, [pc, #264]	; (800199c <HAL_ADC_Start+0x16c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d002      	beq.n	800189e <HAL_ADC_Start+0x6e>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	e000      	b.n	80018a0 <HAL_ADC_Start+0x70>
 800189e:	4b40      	ldr	r3, [pc, #256]	; (80019a0 <HAL_ADC_Start+0x170>)
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d002      	beq.n	80018ae <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d105      	bne.n	80018ba <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018c6:	d106      	bne.n	80018d6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018cc:	f023 0206 	bic.w	r2, r3, #6
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	659a      	str	r2, [r3, #88]	; 0x58
 80018d4:	e002      	b.n	80018dc <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	221c      	movs	r2, #28
 80018e2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a2a      	ldr	r2, [pc, #168]	; (800199c <HAL_ADC_Start+0x16c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d002      	beq.n	80018fc <HAL_ADC_Start+0xcc>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	e000      	b.n	80018fe <HAL_ADC_Start+0xce>
 80018fc:	4b28      	ldr	r3, [pc, #160]	; (80019a0 <HAL_ADC_Start+0x170>)
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	4293      	cmp	r3, r2
 8001904:	d008      	beq.n	8001918 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	2b05      	cmp	r3, #5
 8001910:	d002      	beq.n	8001918 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	2b09      	cmp	r3, #9
 8001916:	d114      	bne.n	8001942 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d007      	beq.n	8001936 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800192e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fde7 	bl	800150e <LL_ADC_REG_StartConversion>
 8001940:	e025      	b.n	800198e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001946:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <HAL_ADC_Start+0x16c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d002      	beq.n	800195e <HAL_ADC_Start+0x12e>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	e000      	b.n	8001960 <HAL_ADC_Start+0x130>
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <HAL_ADC_Start+0x170>)
 8001960:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00f      	beq.n	800198e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001972:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001976:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	655a      	str	r2, [r3, #84]	; 0x54
 800197e:	e006      	b.n	800198e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001988:	e001      	b.n	800198e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800198a:	2302      	movs	r3, #2
 800198c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800198e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	50040300 	.word	0x50040300
 800199c:	50040100 	.word	0x50040100
 80019a0:	50040000 	.word	0x50040000

080019a4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019ae:	4866      	ldr	r0, [pc, #408]	; (8001b48 <HAL_ADC_PollForConversion+0x1a4>)
 80019b0:	f7ff fd1c 	bl	80013ec <LL_ADC_GetMultimode>
 80019b4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d102      	bne.n	80019c4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80019be:	2308      	movs	r3, #8
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	e02a      	b.n	8001a1a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d005      	beq.n	80019d6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d002      	beq.n	80019d6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	2b09      	cmp	r3, #9
 80019d4:	d111      	bne.n	80019fa <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d007      	beq.n	80019f4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e8:	f043 0220 	orr.w	r2, r3, #32
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0a4      	b.n	8001b3e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80019f4:	2304      	movs	r3, #4
 80019f6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80019f8:	e00f      	b.n	8001a1a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80019fa:	4853      	ldr	r0, [pc, #332]	; (8001b48 <HAL_ADC_PollForConversion+0x1a4>)
 80019fc:	f7ff fd04 	bl	8001408 <LL_ADC_GetMultiDMATransfer>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0a:	f043 0220 	orr.w	r2, r3, #32
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e093      	b.n	8001b3e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001a16:	2304      	movs	r3, #4
 8001a18:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a1a:	f7ff fb9f 	bl	800115c <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a20:	e021      	b.n	8001a66 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a28:	d01d      	beq.n	8001a66 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001a2a:	f7ff fb97 	bl	800115c <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d302      	bcc.n	8001a40 <HAL_ADC_PollForConversion+0x9c>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d112      	bne.n	8001a66 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10b      	bne.n	8001a66 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a52:	f043 0204 	orr.w	r2, r3, #4
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e06b      	b.n	8001b3e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0d6      	beq.n	8001a22 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fc22 	bl	80012ce <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d01c      	beq.n	8001aca <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7e5b      	ldrb	r3, [r3, #25]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d118      	bne.n	8001aca <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d111      	bne.n	8001aca <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d105      	bne.n	8001aca <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac2:	f043 0201 	orr.w	r2, r3, #1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1f      	ldr	r2, [pc, #124]	; (8001b4c <HAL_ADC_PollForConversion+0x1a8>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d002      	beq.n	8001ada <HAL_ADC_PollForConversion+0x136>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	e000      	b.n	8001adc <HAL_ADC_PollForConversion+0x138>
 8001ada:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_ADC_PollForConversion+0x1ac>)
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d008      	beq.n	8001af6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d005      	beq.n	8001af6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2b05      	cmp	r3, #5
 8001aee:	d002      	beq.n	8001af6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b09      	cmp	r3, #9
 8001af4:	d104      	bne.n	8001b00 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	e00c      	b.n	8001b1a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a11      	ldr	r2, [pc, #68]	; (8001b4c <HAL_ADC_PollForConversion+0x1a8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d002      	beq.n	8001b10 <HAL_ADC_PollForConversion+0x16c>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	e000      	b.n	8001b12 <HAL_ADC_PollForConversion+0x16e>
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_ADC_PollForConversion+0x1ac>)
 8001b12:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d104      	bne.n	8001b2a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2208      	movs	r2, #8
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	e008      	b.n	8001b3c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d103      	bne.n	8001b3c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	220c      	movs	r2, #12
 8001b3a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	50040300 	.word	0x50040300
 8001b4c:	50040100 	.word	0x50040100
 8001b50:	50040000 	.word	0x50040000

08001b54 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b0b6      	sub	sp, #216	; 0xd8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x22>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e3c7      	b.n	8002322 <HAL_ADC_ConfigChannel+0x7b2>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fcc9 	bl	8001536 <LL_ADC_REG_IsConversionOngoing>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 83a8 	bne.w	80022fc <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b05      	cmp	r3, #5
 8001bb2:	d824      	bhi.n	8001bfe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	3b02      	subs	r3, #2
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d81b      	bhi.n	8001bf6 <HAL_ADC_ConfigChannel+0x86>
 8001bbe:	a201      	add	r2, pc, #4	; (adr r2, 8001bc4 <HAL_ADC_ConfigChannel+0x54>)
 8001bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc4:	08001bd5 	.word	0x08001bd5
 8001bc8:	08001bdd 	.word	0x08001bdd
 8001bcc:	08001be5 	.word	0x08001be5
 8001bd0:	08001bed 	.word	0x08001bed
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	605a      	str	r2, [r3, #4]
          break;
 8001bda:	e011      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2212      	movs	r2, #18
 8001be0:	605a      	str	r2, [r3, #4]
          break;
 8001be2:	e00d      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2218      	movs	r2, #24
 8001be8:	605a      	str	r2, [r3, #4]
          break;
 8001bea:	e009      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bf2:	605a      	str	r2, [r3, #4]
          break;
 8001bf4:	e004      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2206      	movs	r2, #6
 8001bfa:	605a      	str	r2, [r3, #4]
          break;
 8001bfc:	e000      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001bfe:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	6859      	ldr	r1, [r3, #4]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	f7ff fb71 	bl	80012f4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fc8d 	bl	8001536 <LL_ADC_REG_IsConversionOngoing>
 8001c1c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fc99 	bl	800155c <LL_ADC_INJ_IsConversionOngoing>
 8001c2a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f040 81a6 	bne.w	8001f84 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f040 81a1 	bne.w	8001f84 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	6819      	ldr	r1, [r3, #0]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f7ff fb7c 	bl	800134c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	695a      	ldr	r2, [r3, #20]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	08db      	lsrs	r3, r3, #3
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d00a      	beq.n	8001c8c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6919      	ldr	r1, [r3, #16]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c86:	f7ff facd 	bl	8001224 <LL_ADC_SetOffset>
 8001c8a:	e17b      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2100      	movs	r1, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff faea 	bl	800126c <LL_ADC_GetOffsetChannel>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10a      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x148>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fadf 	bl	800126c <LL_ADC_GetOffsetChannel>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	0e9b      	lsrs	r3, r3, #26
 8001cb2:	f003 021f 	and.w	r2, r3, #31
 8001cb6:	e01e      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x186>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fad4 	bl	800126c <LL_ADC_GetOffsetChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001cda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001ce6:	2320      	movs	r3, #32
 8001ce8:	e004      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001cea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d105      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x19e>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	0e9b      	lsrs	r3, r3, #26
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	e018      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x1d0>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001d2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001d32:	2320      	movs	r3, #32
 8001d34:	e004      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001d36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d106      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff faa3 	bl	8001298 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2101      	movs	r1, #1
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fa87 	bl	800126c <LL_ADC_GetOffsetChannel>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10a      	bne.n	8001d7e <HAL_ADC_ConfigChannel+0x20e>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fa7c 	bl	800126c <LL_ADC_GetOffsetChannel>
 8001d74:	4603      	mov	r3, r0
 8001d76:	0e9b      	lsrs	r3, r3, #26
 8001d78:	f003 021f 	and.w	r2, r3, #31
 8001d7c:	e01e      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x24c>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2101      	movs	r1, #1
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fa71 	bl	800126c <LL_ADC_GetOffsetChannel>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d94:	fa93 f3a3 	rbit	r3, r3
 8001d98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001da0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001da4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001dac:	2320      	movs	r3, #32
 8001dae:	e004      	b.n	8001dba <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001db0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001db4:	fab3 f383 	clz	r3, r3
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d105      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x264>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	0e9b      	lsrs	r3, r3, #26
 8001dce:	f003 031f 	and.w	r3, r3, #31
 8001dd2:	e018      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x296>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ddc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001de0:	fa93 f3a3 	rbit	r3, r3
 8001de4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001de8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001dec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001df0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001df8:	2320      	movs	r3, #32
 8001dfa:	e004      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001dfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e00:	fab3 f383 	clz	r3, r3
 8001e04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d106      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2101      	movs	r1, #1
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fa40 	bl	8001298 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fa24 	bl	800126c <LL_ADC_GetOffsetChannel>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10a      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x2d4>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2102      	movs	r1, #2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fa19 	bl	800126c <LL_ADC_GetOffsetChannel>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	0e9b      	lsrs	r3, r3, #26
 8001e3e:	f003 021f 	and.w	r2, r3, #31
 8001e42:	e01e      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x312>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2102      	movs	r1, #2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fa0e 	bl	800126c <LL_ADC_GetOffsetChannel>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001e62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001e6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001e72:	2320      	movs	r3, #32
 8001e74:	e004      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001e76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e7a:	fab3 f383 	clz	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d105      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x32a>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	0e9b      	lsrs	r3, r3, #26
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	e016      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x358>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001eac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001eae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001eb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001eba:	2320      	movs	r3, #32
 8001ebc:	e004      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001ebe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d106      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2102      	movs	r1, #2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff f9df 	bl	8001298 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2103      	movs	r1, #3
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff f9c3 	bl	800126c <LL_ADC_GetOffsetChannel>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10a      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x396>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2103      	movs	r1, #3
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff f9b8 	bl	800126c <LL_ADC_GetOffsetChannel>
 8001efc:	4603      	mov	r3, r0
 8001efe:	0e9b      	lsrs	r3, r3, #26
 8001f00:	f003 021f 	and.w	r2, r3, #31
 8001f04:	e017      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x3c6>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2103      	movs	r1, #3
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff f9ad 	bl	800126c <LL_ADC_GetOffsetChannel>
 8001f12:	4603      	mov	r3, r0
 8001f14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001f1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f20:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001f22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001f28:	2320      	movs	r3, #32
 8001f2a:	e003      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f2e:	fab3 f383 	clz	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d105      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x3de>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	0e9b      	lsrs	r3, r3, #26
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	e011      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x402>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f5e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001f66:	2320      	movs	r3, #32
 8001f68:	e003      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f6c:	fab3 f383 	clz	r3, r3
 8001f70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d106      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2103      	movs	r1, #3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff f98a 	bl	8001298 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff faad 	bl	80014e8 <LL_ADC_IsEnabled>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f040 813f 	bne.w	8002214 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	6819      	ldr	r1, [r3, #0]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	f7ff f9fe 	bl	80013a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4a8e      	ldr	r2, [pc, #568]	; (80021e8 <HAL_ADC_ConfigChannel+0x678>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	f040 8130 	bne.w	8002214 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10b      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x46c>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	0e9b      	lsrs	r3, r3, #26
 8001fca:	3301      	adds	r3, #1
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	2b09      	cmp	r3, #9
 8001fd2:	bf94      	ite	ls
 8001fd4:	2301      	movls	r3, #1
 8001fd6:	2300      	movhi	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	e019      	b.n	8002010 <HAL_ADC_ConfigChannel+0x4a0>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fe4:	fa93 f3a3 	rbit	r3, r3
 8001fe8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001fea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fec:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001fee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	e003      	b.n	8002000 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ffa:	fab3 f383 	clz	r3, r3
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	3301      	adds	r3, #1
 8002002:	f003 031f 	and.w	r3, r3, #31
 8002006:	2b09      	cmp	r3, #9
 8002008:	bf94      	ite	ls
 800200a:	2301      	movls	r3, #1
 800200c:	2300      	movhi	r3, #0
 800200e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002010:	2b00      	cmp	r3, #0
 8002012:	d079      	beq.n	8002108 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201c:	2b00      	cmp	r3, #0
 800201e:	d107      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x4c0>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	0e9b      	lsrs	r3, r3, #26
 8002026:	3301      	adds	r3, #1
 8002028:	069b      	lsls	r3, r3, #26
 800202a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800202e:	e015      	b.n	800205c <HAL_ADC_ConfigChannel+0x4ec>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800203e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002040:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002048:	2320      	movs	r3, #32
 800204a:	e003      	b.n	8002054 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800204c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	3301      	adds	r3, #1
 8002056:	069b      	lsls	r3, r3, #26
 8002058:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002064:	2b00      	cmp	r3, #0
 8002066:	d109      	bne.n	800207c <HAL_ADC_ConfigChannel+0x50c>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0e9b      	lsrs	r3, r3, #26
 800206e:	3301      	adds	r3, #1
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	2101      	movs	r1, #1
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	e017      	b.n	80020ac <HAL_ADC_ConfigChannel+0x53c>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002084:	fa93 f3a3 	rbit	r3, r3
 8002088:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800208a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800208c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800208e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002094:	2320      	movs	r3, #32
 8002096:	e003      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	3301      	adds	r3, #1
 80020a2:	f003 031f 	and.w	r3, r3, #31
 80020a6:	2101      	movs	r1, #1
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	ea42 0103 	orr.w	r1, r2, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10a      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x562>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	0e9b      	lsrs	r3, r3, #26
 80020c2:	3301      	adds	r3, #1
 80020c4:	f003 021f 	and.w	r2, r3, #31
 80020c8:	4613      	mov	r3, r2
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	4413      	add	r3, r2
 80020ce:	051b      	lsls	r3, r3, #20
 80020d0:	e018      	b.n	8002104 <HAL_ADC_ConfigChannel+0x594>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80020e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80020e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80020ea:	2320      	movs	r3, #32
 80020ec:	e003      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80020ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f0:	fab3 f383 	clz	r3, r3
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	3301      	adds	r3, #1
 80020f8:	f003 021f 	and.w	r2, r3, #31
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002104:	430b      	orrs	r3, r1
 8002106:	e080      	b.n	800220a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002110:	2b00      	cmp	r3, #0
 8002112:	d107      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x5b4>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	0e9b      	lsrs	r3, r3, #26
 800211a:	3301      	adds	r3, #1
 800211c:	069b      	lsls	r3, r3, #26
 800211e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002122:	e015      	b.n	8002150 <HAL_ADC_ConfigChannel+0x5e0>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212c:	fa93 f3a3 	rbit	r3, r3
 8002130:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002134:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800213c:	2320      	movs	r3, #32
 800213e:	e003      	b.n	8002148 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002142:	fab3 f383 	clz	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	3301      	adds	r3, #1
 800214a:	069b      	lsls	r3, r3, #26
 800214c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002158:	2b00      	cmp	r3, #0
 800215a:	d109      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x600>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	0e9b      	lsrs	r3, r3, #26
 8002162:	3301      	adds	r3, #1
 8002164:	f003 031f 	and.w	r3, r3, #31
 8002168:	2101      	movs	r1, #1
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	e017      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x630>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	fa93 f3a3 	rbit	r3, r3
 800217c:	61fb      	str	r3, [r7, #28]
  return result;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002188:	2320      	movs	r3, #32
 800218a:	e003      	b.n	8002194 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	3301      	adds	r3, #1
 8002196:	f003 031f 	and.w	r3, r3, #31
 800219a:	2101      	movs	r1, #1
 800219c:	fa01 f303 	lsl.w	r3, r1, r3
 80021a0:	ea42 0103 	orr.w	r1, r2, r3
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10d      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x65c>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	0e9b      	lsrs	r3, r3, #26
 80021b6:	3301      	adds	r3, #1
 80021b8:	f003 021f 	and.w	r2, r3, #31
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	3b1e      	subs	r3, #30
 80021c4:	051b      	lsls	r3, r3, #20
 80021c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021ca:	e01d      	b.n	8002208 <HAL_ADC_ConfigChannel+0x698>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	fa93 f3a3 	rbit	r3, r3
 80021d8:	613b      	str	r3, [r7, #16]
  return result;
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d103      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80021e4:	2320      	movs	r3, #32
 80021e6:	e005      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x684>
 80021e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	fab3 f383 	clz	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	3301      	adds	r3, #1
 80021f6:	f003 021f 	and.w	r2, r3, #31
 80021fa:	4613      	mov	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	3b1e      	subs	r3, #30
 8002202:	051b      	lsls	r3, r3, #20
 8002204:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002208:	430b      	orrs	r3, r1
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	6892      	ldr	r2, [r2, #8]
 800220e:	4619      	mov	r1, r3
 8002210:	f7ff f89c 	bl	800134c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b44      	ldr	r3, [pc, #272]	; (800232c <HAL_ADC_ConfigChannel+0x7bc>)
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d07a      	beq.n	8002316 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002220:	4843      	ldr	r0, [pc, #268]	; (8002330 <HAL_ADC_ConfigChannel+0x7c0>)
 8002222:	f7fe fff1 	bl	8001208 <LL_ADC_GetCommonPathInternalCh>
 8002226:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a41      	ldr	r2, [pc, #260]	; (8002334 <HAL_ADC_ConfigChannel+0x7c4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d12c      	bne.n	800228e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002234:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002238:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d126      	bne.n	800228e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a3c      	ldr	r2, [pc, #240]	; (8002338 <HAL_ADC_ConfigChannel+0x7c8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d004      	beq.n	8002254 <HAL_ADC_ConfigChannel+0x6e4>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a3b      	ldr	r2, [pc, #236]	; (800233c <HAL_ADC_ConfigChannel+0x7cc>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d15d      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002254:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002258:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800225c:	4619      	mov	r1, r3
 800225e:	4834      	ldr	r0, [pc, #208]	; (8002330 <HAL_ADC_ConfigChannel+0x7c0>)
 8002260:	f7fe ffbf 	bl	80011e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002264:	4b36      	ldr	r3, [pc, #216]	; (8002340 <HAL_ADC_ConfigChannel+0x7d0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	099b      	lsrs	r3, r3, #6
 800226a:	4a36      	ldr	r2, [pc, #216]	; (8002344 <HAL_ADC_ConfigChannel+0x7d4>)
 800226c:	fba2 2303 	umull	r2, r3, r2, r3
 8002270:	099b      	lsrs	r3, r3, #6
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800227e:	e002      	b.n	8002286 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	3b01      	subs	r3, #1
 8002284:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f9      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800228c:	e040      	b.n	8002310 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2d      	ldr	r2, [pc, #180]	; (8002348 <HAL_ADC_ConfigChannel+0x7d8>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d118      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x75a>
 8002298:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800229c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d112      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a23      	ldr	r2, [pc, #140]	; (8002338 <HAL_ADC_ConfigChannel+0x7c8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d004      	beq.n	80022b8 <HAL_ADC_ConfigChannel+0x748>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a22      	ldr	r2, [pc, #136]	; (800233c <HAL_ADC_ConfigChannel+0x7cc>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d12d      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022c0:	4619      	mov	r1, r3
 80022c2:	481b      	ldr	r0, [pc, #108]	; (8002330 <HAL_ADC_ConfigChannel+0x7c0>)
 80022c4:	f7fe ff8d 	bl	80011e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022c8:	e024      	b.n	8002314 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a1f      	ldr	r2, [pc, #124]	; (800234c <HAL_ADC_ConfigChannel+0x7dc>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d120      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d11a      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a14      	ldr	r2, [pc, #80]	; (8002338 <HAL_ADC_ConfigChannel+0x7c8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d115      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022f2:	4619      	mov	r1, r3
 80022f4:	480e      	ldr	r0, [pc, #56]	; (8002330 <HAL_ADC_ConfigChannel+0x7c0>)
 80022f6:	f7fe ff74 	bl	80011e2 <LL_ADC_SetCommonPathInternalCh>
 80022fa:	e00c      	b.n	8002316 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002300:	f043 0220 	orr.w	r2, r3, #32
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800230e:	e002      	b.n	8002316 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002310:	bf00      	nop
 8002312:	e000      	b.n	8002316 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002314:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800231e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002322:	4618      	mov	r0, r3
 8002324:	37d8      	adds	r7, #216	; 0xd8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	80080000 	.word	0x80080000
 8002330:	50040300 	.word	0x50040300
 8002334:	c7520000 	.word	0xc7520000
 8002338:	50040000 	.word	0x50040000
 800233c:	50040200 	.word	0x50040200
 8002340:	20000000 	.word	0x20000000
 8002344:	053e2d63 	.word	0x053e2d63
 8002348:	cb840000 	.word	0xcb840000
 800234c:	80000001 	.word	0x80000001

08002350 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002358:	2300      	movs	r3, #0
 800235a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff f8c1 	bl	80014e8 <LL_ADC_IsEnabled>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d169      	bne.n	8002440 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	4b36      	ldr	r3, [pc, #216]	; (800244c <ADC_Enable+0xfc>)
 8002374:	4013      	ands	r3, r2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00d      	beq.n	8002396 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	f043 0210 	orr.w	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238a:	f043 0201 	orr.w	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e055      	b.n	8002442 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff f890 	bl	80014c0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80023a0:	482b      	ldr	r0, [pc, #172]	; (8002450 <ADC_Enable+0x100>)
 80023a2:	f7fe ff31 	bl	8001208 <LL_ADC_GetCommonPathInternalCh>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d013      	beq.n	80023d8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023b0:	4b28      	ldr	r3, [pc, #160]	; (8002454 <ADC_Enable+0x104>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	099b      	lsrs	r3, r3, #6
 80023b6:	4a28      	ldr	r2, [pc, #160]	; (8002458 <ADC_Enable+0x108>)
 80023b8:	fba2 2303 	umull	r2, r3, r2, r3
 80023bc:	099b      	lsrs	r3, r3, #6
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	4613      	mov	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80023ca:	e002      	b.n	80023d2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f9      	bne.n	80023cc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80023d8:	f7fe fec0 	bl	800115c <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023de:	e028      	b.n	8002432 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff f87f 	bl	80014e8 <LL_ADC_IsEnabled>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d104      	bne.n	80023fa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff f863 	bl	80014c0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023fa:	f7fe feaf 	bl	800115c <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d914      	bls.n	8002432 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b01      	cmp	r3, #1
 8002414:	d00d      	beq.n	8002432 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	f043 0210 	orr.w	r2, r3, #16
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	f043 0201 	orr.w	r2, r3, #1
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e007      	b.n	8002442 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b01      	cmp	r3, #1
 800243e:	d1cf      	bne.n	80023e0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	8000003f 	.word	0x8000003f
 8002450:	50040300 	.word	0x50040300
 8002454:	20000000 	.word	0x20000000
 8002458:	053e2d63 	.word	0x053e2d63

0800245c <LL_ADC_IsEnabled>:
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <LL_ADC_IsEnabled+0x18>
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <LL_ADC_IsEnabled+0x1a>
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <LL_ADC_REG_IsConversionOngoing>:
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b04      	cmp	r3, #4
 8002494:	d101      	bne.n	800249a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80024a8:	b590      	push	{r4, r7, lr}
 80024aa:	b09f      	sub	sp, #124	; 0x7c
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e093      	b.n	80025ee <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80024ce:	2300      	movs	r3, #0
 80024d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80024d2:	2300      	movs	r3, #0
 80024d4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a47      	ldr	r2, [pc, #284]	; (80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d102      	bne.n	80024e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80024e0:	4b46      	ldr	r3, [pc, #280]	; (80025fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	e001      	b.n	80024ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80024e6:	2300      	movs	r3, #0
 80024e8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10b      	bne.n	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f4:	f043 0220 	orr.w	r2, r3, #32
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e072      	b.n	80025ee <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff ffb9 	bl	8002482 <LL_ADC_REG_IsConversionOngoing>
 8002510:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ffb3 	bl	8002482 <LL_ADC_REG_IsConversionOngoing>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d154      	bne.n	80025cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002524:	2b00      	cmp	r3, #0
 8002526:	d151      	bne.n	80025cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002528:	4b35      	ldr	r3, [pc, #212]	; (8002600 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800252a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d02c      	beq.n	800258e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	6859      	ldr	r1, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002546:	035b      	lsls	r3, r3, #13
 8002548:	430b      	orrs	r3, r1
 800254a:	431a      	orrs	r2, r3
 800254c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800254e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002550:	4829      	ldr	r0, [pc, #164]	; (80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002552:	f7ff ff83 	bl	800245c <LL_ADC_IsEnabled>
 8002556:	4604      	mov	r4, r0
 8002558:	4828      	ldr	r0, [pc, #160]	; (80025fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800255a:	f7ff ff7f 	bl	800245c <LL_ADC_IsEnabled>
 800255e:	4603      	mov	r3, r0
 8002560:	431c      	orrs	r4, r3
 8002562:	4828      	ldr	r0, [pc, #160]	; (8002604 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002564:	f7ff ff7a 	bl	800245c <LL_ADC_IsEnabled>
 8002568:	4603      	mov	r3, r0
 800256a:	4323      	orrs	r3, r4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d137      	bne.n	80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002578:	f023 030f 	bic.w	r3, r3, #15
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	6811      	ldr	r1, [r2, #0]
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	6892      	ldr	r2, [r2, #8]
 8002584:	430a      	orrs	r2, r1
 8002586:	431a      	orrs	r2, r3
 8002588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800258a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800258c:	e028      	b.n	80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800258e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002598:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800259a:	4817      	ldr	r0, [pc, #92]	; (80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800259c:	f7ff ff5e 	bl	800245c <LL_ADC_IsEnabled>
 80025a0:	4604      	mov	r4, r0
 80025a2:	4816      	ldr	r0, [pc, #88]	; (80025fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80025a4:	f7ff ff5a 	bl	800245c <LL_ADC_IsEnabled>
 80025a8:	4603      	mov	r3, r0
 80025aa:	431c      	orrs	r4, r3
 80025ac:	4815      	ldr	r0, [pc, #84]	; (8002604 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80025ae:	f7ff ff55 	bl	800245c <LL_ADC_IsEnabled>
 80025b2:	4603      	mov	r3, r0
 80025b4:	4323      	orrs	r3, r4
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d112      	bne.n	80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025c2:	f023 030f 	bic.w	r3, r3, #15
 80025c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025c8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025ca:	e009      	b.n	80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d0:	f043 0220 	orr.w	r2, r3, #32
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80025de:	e000      	b.n	80025e2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	377c      	adds	r7, #124	; 0x7c
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd90      	pop	{r4, r7, pc}
 80025f6:	bf00      	nop
 80025f8:	50040000 	.word	0x50040000
 80025fc:	50040100 	.word	0x50040100
 8002600:	50040300 	.word	0x50040300
 8002604:	50040200 	.word	0x50040200

08002608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002624:	4013      	ands	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263a:	4a04      	ldr	r2, [pc, #16]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	60d3      	str	r3, [r2, #12]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <__NVIC_GetPriorityGrouping+0x18>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	f003 0307 	and.w	r3, r3, #7
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	6039      	str	r1, [r7, #0]
 8002676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	2b00      	cmp	r3, #0
 800267e:	db0a      	blt.n	8002696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	b2da      	uxtb	r2, r3
 8002684:	490c      	ldr	r1, [pc, #48]	; (80026b8 <__NVIC_SetPriority+0x4c>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	0112      	lsls	r2, r2, #4
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	440b      	add	r3, r1
 8002690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002694:	e00a      	b.n	80026ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4908      	ldr	r1, [pc, #32]	; (80026bc <__NVIC_SetPriority+0x50>)
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	3b04      	subs	r3, #4
 80026a4:	0112      	lsls	r2, r2, #4
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	440b      	add	r3, r1
 80026aa:	761a      	strb	r2, [r3, #24]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000e100 	.word	0xe000e100
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b089      	sub	sp, #36	; 0x24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f1c3 0307 	rsb	r3, r3, #7
 80026da:	2b04      	cmp	r3, #4
 80026dc:	bf28      	it	cs
 80026de:	2304      	movcs	r3, #4
 80026e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2b06      	cmp	r3, #6
 80026e8:	d902      	bls.n	80026f0 <NVIC_EncodePriority+0x30>
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3b03      	subs	r3, #3
 80026ee:	e000      	b.n	80026f2 <NVIC_EncodePriority+0x32>
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f4:	f04f 32ff 	mov.w	r2, #4294967295
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43da      	mvns	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	401a      	ands	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002708:	f04f 31ff 	mov.w	r1, #4294967295
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	43d9      	mvns	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	4313      	orrs	r3, r2
         );
}
 800271a:	4618      	mov	r0, r3
 800271c:	3724      	adds	r7, #36	; 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002738:	d301      	bcc.n	800273e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273a:	2301      	movs	r3, #1
 800273c:	e00f      	b.n	800275e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800273e:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <SysTick_Config+0x40>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3b01      	subs	r3, #1
 8002744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002746:	210f      	movs	r1, #15
 8002748:	f04f 30ff 	mov.w	r0, #4294967295
 800274c:	f7ff ff8e 	bl	800266c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <SysTick_Config+0x40>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002756:	4b04      	ldr	r3, [pc, #16]	; (8002768 <SysTick_Config+0x40>)
 8002758:	2207      	movs	r2, #7
 800275a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	e000e010 	.word	0xe000e010

0800276c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ff47 	bl	8002608 <__NVIC_SetPriorityGrouping>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b086      	sub	sp, #24
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002794:	f7ff ff5c 	bl	8002650 <__NVIC_GetPriorityGrouping>
 8002798:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	6978      	ldr	r0, [r7, #20]
 80027a0:	f7ff ff8e 	bl	80026c0 <NVIC_EncodePriority>
 80027a4:	4602      	mov	r2, r0
 80027a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff5d 	bl	800266c <__NVIC_SetPriority>
}
 80027b2:	bf00      	nop
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff ffb0 	bl	8002728 <SysTick_Config>
 80027c8:	4603      	mov	r3, r0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e2:	e17f      	b.n	8002ae4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	2101      	movs	r1, #1
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	4013      	ands	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 8171 	beq.w	8002ade <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b01      	cmp	r3, #1
 8002806:	d005      	beq.n	8002814 <HAL_GPIO_Init+0x40>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d130      	bne.n	8002876 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	2203      	movs	r2, #3
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800284a:	2201      	movs	r2, #1
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4013      	ands	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	091b      	lsrs	r3, r3, #4
 8002860:	f003 0201 	and.w	r2, r3, #1
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b03      	cmp	r3, #3
 8002880:	d118      	bne.n	80028b4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002888:	2201      	movs	r2, #1
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4013      	ands	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	08db      	lsrs	r3, r3, #3
 800289e:	f003 0201 	and.w	r2, r3, #1
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d017      	beq.n	80028f0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	2203      	movs	r2, #3
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4013      	ands	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d123      	bne.n	8002944 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	08da      	lsrs	r2, r3, #3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3208      	adds	r2, #8
 8002904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002908:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	220f      	movs	r2, #15
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4013      	ands	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	08da      	lsrs	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3208      	adds	r2, #8
 800293e:	6939      	ldr	r1, [r7, #16]
 8002940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0203 	and.w	r2, r3, #3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80ac 	beq.w	8002ade <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002986:	4b5f      	ldr	r3, [pc, #380]	; (8002b04 <HAL_GPIO_Init+0x330>)
 8002988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800298a:	4a5e      	ldr	r2, [pc, #376]	; (8002b04 <HAL_GPIO_Init+0x330>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6613      	str	r3, [r2, #96]	; 0x60
 8002992:	4b5c      	ldr	r3, [pc, #368]	; (8002b04 <HAL_GPIO_Init+0x330>)
 8002994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800299e:	4a5a      	ldr	r2, [pc, #360]	; (8002b08 <HAL_GPIO_Init+0x334>)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	3302      	adds	r3, #2
 80029a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	220f      	movs	r2, #15
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4013      	ands	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029c8:	d025      	beq.n	8002a16 <HAL_GPIO_Init+0x242>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a4f      	ldr	r2, [pc, #316]	; (8002b0c <HAL_GPIO_Init+0x338>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d01f      	beq.n	8002a12 <HAL_GPIO_Init+0x23e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a4e      	ldr	r2, [pc, #312]	; (8002b10 <HAL_GPIO_Init+0x33c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d019      	beq.n	8002a0e <HAL_GPIO_Init+0x23a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a4d      	ldr	r2, [pc, #308]	; (8002b14 <HAL_GPIO_Init+0x340>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_GPIO_Init+0x236>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4c      	ldr	r2, [pc, #304]	; (8002b18 <HAL_GPIO_Init+0x344>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00d      	beq.n	8002a06 <HAL_GPIO_Init+0x232>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a4b      	ldr	r2, [pc, #300]	; (8002b1c <HAL_GPIO_Init+0x348>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d007      	beq.n	8002a02 <HAL_GPIO_Init+0x22e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a4a      	ldr	r2, [pc, #296]	; (8002b20 <HAL_GPIO_Init+0x34c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d101      	bne.n	80029fe <HAL_GPIO_Init+0x22a>
 80029fa:	2306      	movs	r3, #6
 80029fc:	e00c      	b.n	8002a18 <HAL_GPIO_Init+0x244>
 80029fe:	2307      	movs	r3, #7
 8002a00:	e00a      	b.n	8002a18 <HAL_GPIO_Init+0x244>
 8002a02:	2305      	movs	r3, #5
 8002a04:	e008      	b.n	8002a18 <HAL_GPIO_Init+0x244>
 8002a06:	2304      	movs	r3, #4
 8002a08:	e006      	b.n	8002a18 <HAL_GPIO_Init+0x244>
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e004      	b.n	8002a18 <HAL_GPIO_Init+0x244>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e002      	b.n	8002a18 <HAL_GPIO_Init+0x244>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <HAL_GPIO_Init+0x244>
 8002a16:	2300      	movs	r3, #0
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	f002 0203 	and.w	r2, r2, #3
 8002a1e:	0092      	lsls	r2, r2, #2
 8002a20:	4093      	lsls	r3, r2
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a28:	4937      	ldr	r1, [pc, #220]	; (8002b08 <HAL_GPIO_Init+0x334>)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	089b      	lsrs	r3, r3, #2
 8002a2e:	3302      	adds	r3, #2
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a36:	4b3b      	ldr	r3, [pc, #236]	; (8002b24 <HAL_GPIO_Init+0x350>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4013      	ands	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a5a:	4a32      	ldr	r2, [pc, #200]	; (8002b24 <HAL_GPIO_Init+0x350>)
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a60:	4b30      	ldr	r3, [pc, #192]	; (8002b24 <HAL_GPIO_Init+0x350>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a84:	4a27      	ldr	r2, [pc, #156]	; (8002b24 <HAL_GPIO_Init+0x350>)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a8a:	4b26      	ldr	r3, [pc, #152]	; (8002b24 <HAL_GPIO_Init+0x350>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4013      	ands	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002aae:	4a1d      	ldr	r2, [pc, #116]	; (8002b24 <HAL_GPIO_Init+0x350>)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <HAL_GPIO_Init+0x350>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ad8:	4a12      	ldr	r2, [pc, #72]	; (8002b24 <HAL_GPIO_Init+0x350>)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	fa22 f303 	lsr.w	r3, r2, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f47f ae78 	bne.w	80027e4 <HAL_GPIO_Init+0x10>
  }
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40010000 	.word	0x40010000
 8002b0c:	48000400 	.word	0x48000400
 8002b10:	48000800 	.word	0x48000800
 8002b14:	48000c00 	.word	0x48000c00
 8002b18:	48001000 	.word	0x48001000
 8002b1c:	48001400 	.word	0x48001400
 8002b20:	48001800 	.word	0x48001800
 8002b24:	40010400 	.word	0x40010400

08002b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	807b      	strh	r3, [r7, #2]
 8002b34:	4613      	mov	r3, r2
 8002b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b38:	787b      	ldrb	r3, [r7, #1]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b3e:	887a      	ldrh	r2, [r7, #2]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b44:	e002      	b.n	8002b4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b46:	887a      	ldrh	r2, [r7, #2]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40007000 	.word	0x40007000

08002b74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b82:	d130      	bne.n	8002be6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b84:	4b23      	ldr	r3, [pc, #140]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b90:	d038      	beq.n	8002c04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b92:	4b20      	ldr	r3, [pc, #128]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b9a:	4a1e      	ldr	r2, [pc, #120]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ba0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ba2:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2232      	movs	r2, #50	; 0x32
 8002ba8:	fb02 f303 	mul.w	r3, r2, r3
 8002bac:	4a1b      	ldr	r2, [pc, #108]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bae:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb2:	0c9b      	lsrs	r3, r3, #18
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bb8:	e002      	b.n	8002bc0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bc0:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bcc:	d102      	bne.n	8002bd4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f2      	bne.n	8002bba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bd4:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be0:	d110      	bne.n	8002c04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e00f      	b.n	8002c06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002be6:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf2:	d007      	beq.n	8002c04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bf4:	4b07      	ldr	r3, [pc, #28]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bfc:	4a05      	ldr	r2, [pc, #20]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40007000 	.word	0x40007000
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	431bde83 	.word	0x431bde83

08002c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e3ca      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c32:	4b97      	ldr	r3, [pc, #604]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c3c:	4b94      	ldr	r3, [pc, #592]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0310 	and.w	r3, r3, #16
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80e4 	beq.w	8002e1c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d007      	beq.n	8002c6a <HAL_RCC_OscConfig+0x4a>
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	2b0c      	cmp	r3, #12
 8002c5e:	f040 808b 	bne.w	8002d78 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	f040 8087 	bne.w	8002d78 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c6a:	4b89      	ldr	r3, [pc, #548]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_RCC_OscConfig+0x62>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e3a2      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1a      	ldr	r2, [r3, #32]
 8002c86:	4b82      	ldr	r3, [pc, #520]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d004      	beq.n	8002c9c <HAL_RCC_OscConfig+0x7c>
 8002c92:	4b7f      	ldr	r3, [pc, #508]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c9a:	e005      	b.n	8002ca8 <HAL_RCC_OscConfig+0x88>
 8002c9c:	4b7c      	ldr	r3, [pc, #496]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca2:	091b      	lsrs	r3, r3, #4
 8002ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d223      	bcs.n	8002cf4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fd1d 	bl	80036f0 <RCC_SetFlashLatencyFromMSIRange>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e383      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cc0:	4b73      	ldr	r3, [pc, #460]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a72      	ldr	r2, [pc, #456]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002cc6:	f043 0308 	orr.w	r3, r3, #8
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	4b70      	ldr	r3, [pc, #448]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	496d      	ldr	r1, [pc, #436]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cde:	4b6c      	ldr	r3, [pc, #432]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	4968      	ldr	r1, [pc, #416]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]
 8002cf2:	e025      	b.n	8002d40 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cf4:	4b66      	ldr	r3, [pc, #408]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a65      	ldr	r2, [pc, #404]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002cfa:	f043 0308 	orr.w	r3, r3, #8
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	4b63      	ldr	r3, [pc, #396]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	4960      	ldr	r1, [pc, #384]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d12:	4b5f      	ldr	r3, [pc, #380]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	021b      	lsls	r3, r3, #8
 8002d20:	495b      	ldr	r1, [pc, #364]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fcdd 	bl	80036f0 <RCC_SetFlashLatencyFromMSIRange>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e343      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d40:	f000 fc4a 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 8002d44:	4602      	mov	r2, r0
 8002d46:	4b52      	ldr	r3, [pc, #328]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	091b      	lsrs	r3, r3, #4
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	4950      	ldr	r1, [pc, #320]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002d52:	5ccb      	ldrb	r3, [r1, r3]
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5c:	4a4e      	ldr	r2, [pc, #312]	; (8002e98 <HAL_RCC_OscConfig+0x278>)
 8002d5e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d60:	4b4e      	ldr	r3, [pc, #312]	; (8002e9c <HAL_RCC_OscConfig+0x27c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fe f9a9 	bl	80010bc <HAL_InitTick>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d052      	beq.n	8002e1a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	e327      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d032      	beq.n	8002de6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d80:	4b43      	ldr	r3, [pc, #268]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a42      	ldr	r2, [pc, #264]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d8c:	f7fe f9e6 	bl	800115c <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d94:	f7fe f9e2 	bl	800115c <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e310      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002da6:	4b3a      	ldr	r3, [pc, #232]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002db2:	4b37      	ldr	r3, [pc, #220]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a36      	ldr	r2, [pc, #216]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002db8:	f043 0308 	orr.w	r3, r3, #8
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	4b34      	ldr	r3, [pc, #208]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4931      	ldr	r1, [pc, #196]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dd0:	4b2f      	ldr	r3, [pc, #188]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	021b      	lsls	r3, r3, #8
 8002dde:	492c      	ldr	r1, [pc, #176]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	604b      	str	r3, [r1, #4]
 8002de4:	e01a      	b.n	8002e1c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002de6:	4b2a      	ldr	r3, [pc, #168]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a29      	ldr	r2, [pc, #164]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002dec:	f023 0301 	bic.w	r3, r3, #1
 8002df0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002df2:	f7fe f9b3 	bl	800115c <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dfa:	f7fe f9af 	bl	800115c <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e2dd      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e0c:	4b20      	ldr	r3, [pc, #128]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f0      	bne.n	8002dfa <HAL_RCC_OscConfig+0x1da>
 8002e18:	e000      	b.n	8002e1c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e1a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d074      	beq.n	8002f12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d005      	beq.n	8002e3a <HAL_RCC_OscConfig+0x21a>
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	2b0c      	cmp	r3, #12
 8002e32:	d10e      	bne.n	8002e52 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d10b      	bne.n	8002e52 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3a:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d064      	beq.n	8002f10 <HAL_RCC_OscConfig+0x2f0>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d160      	bne.n	8002f10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e2ba      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5a:	d106      	bne.n	8002e6a <HAL_RCC_OscConfig+0x24a>
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a0b      	ldr	r2, [pc, #44]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	e026      	b.n	8002eb8 <HAL_RCC_OscConfig+0x298>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e72:	d115      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x280>
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a05      	ldr	r2, [pc, #20]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002e7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a02      	ldr	r2, [pc, #8]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	e014      	b.n	8002eb8 <HAL_RCC_OscConfig+0x298>
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
 8002e94:	08004aac 	.word	0x08004aac
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	20000004 	.word	0x20000004
 8002ea0:	4ba0      	ldr	r3, [pc, #640]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a9f      	ldr	r2, [pc, #636]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8002ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eaa:	6013      	str	r3, [r2, #0]
 8002eac:	4b9d      	ldr	r3, [pc, #628]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a9c      	ldr	r2, [pc, #624]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8002eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d013      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7fe f94c 	bl	800115c <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec8:	f7fe f948 	bl	800115c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b64      	cmp	r3, #100	; 0x64
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e276      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eda:	4b92      	ldr	r3, [pc, #584]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x2a8>
 8002ee6:	e014      	b.n	8002f12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7fe f938 	bl	800115c <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef0:	f7fe f934 	bl	800115c <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b64      	cmp	r3, #100	; 0x64
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e262      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f02:	4b88      	ldr	r3, [pc, #544]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x2d0>
 8002f0e:	e000      	b.n	8002f12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d060      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_OscConfig+0x310>
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	2b0c      	cmp	r3, #12
 8002f28:	d119      	bne.n	8002f5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d116      	bne.n	8002f5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f30:	4b7c      	ldr	r3, [pc, #496]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_OscConfig+0x328>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e23f      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f48:	4b76      	ldr	r3, [pc, #472]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	061b      	lsls	r3, r3, #24
 8002f56:	4973      	ldr	r1, [pc, #460]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f5c:	e040      	b.n	8002fe0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d023      	beq.n	8002fae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f66:	4b6f      	ldr	r3, [pc, #444]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a6e      	ldr	r2, [pc, #440]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8002f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f72:	f7fe f8f3 	bl	800115c <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f7a:	f7fe f8ef 	bl	800115c <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e21d      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f8c:	4b65      	ldr	r3, [pc, #404]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f98:	4b62      	ldr	r3, [pc, #392]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	061b      	lsls	r3, r3, #24
 8002fa6:	495f      	ldr	r1, [pc, #380]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	604b      	str	r3, [r1, #4]
 8002fac:	e018      	b.n	8002fe0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fae:	4b5d      	ldr	r3, [pc, #372]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a5c      	ldr	r2, [pc, #368]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8002fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fba:	f7fe f8cf 	bl	800115c <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fc2:	f7fe f8cb 	bl	800115c <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e1f9      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fd4:	4b53      	ldr	r3, [pc, #332]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1f0      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d03c      	beq.n	8003066 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d01c      	beq.n	800302e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ff4:	4b4b      	ldr	r3, [pc, #300]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8002ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ffa:	4a4a      	ldr	r2, [pc, #296]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003004:	f7fe f8aa 	bl	800115c <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800300c:	f7fe f8a6 	bl	800115c <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e1d4      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800301e:	4b41      	ldr	r3, [pc, #260]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8003020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0ef      	beq.n	800300c <HAL_RCC_OscConfig+0x3ec>
 800302c:	e01b      	b.n	8003066 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800302e:	4b3d      	ldr	r3, [pc, #244]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8003030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003034:	4a3b      	ldr	r2, [pc, #236]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8003036:	f023 0301 	bic.w	r3, r3, #1
 800303a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303e:	f7fe f88d 	bl	800115c <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003046:	f7fe f889 	bl	800115c <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e1b7      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003058:	4b32      	ldr	r3, [pc, #200]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 800305a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1ef      	bne.n	8003046 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 80a6 	beq.w	80031c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003074:	2300      	movs	r3, #0
 8003076:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003078:	4b2a      	ldr	r3, [pc, #168]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 800307a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10d      	bne.n	80030a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003084:	4b27      	ldr	r3, [pc, #156]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8003086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003088:	4a26      	ldr	r2, [pc, #152]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 800308a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308e:	6593      	str	r3, [r2, #88]	; 0x58
 8003090:	4b24      	ldr	r3, [pc, #144]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8003092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800309c:	2301      	movs	r3, #1
 800309e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030a0:	4b21      	ldr	r3, [pc, #132]	; (8003128 <HAL_RCC_OscConfig+0x508>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d118      	bne.n	80030de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030ac:	4b1e      	ldr	r3, [pc, #120]	; (8003128 <HAL_RCC_OscConfig+0x508>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a1d      	ldr	r2, [pc, #116]	; (8003128 <HAL_RCC_OscConfig+0x508>)
 80030b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030b8:	f7fe f850 	bl	800115c <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c0:	f7fe f84c 	bl	800115c <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e17a      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030d2:	4b15      	ldr	r3, [pc, #84]	; (8003128 <HAL_RCC_OscConfig+0x508>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d108      	bne.n	80030f8 <HAL_RCC_OscConfig+0x4d8>
 80030e6:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 80030e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ec:	4a0d      	ldr	r2, [pc, #52]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030f6:	e029      	b.n	800314c <HAL_RCC_OscConfig+0x52c>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d115      	bne.n	800312c <HAL_RCC_OscConfig+0x50c>
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8003102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003106:	4a07      	ldr	r2, [pc, #28]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8003108:	f043 0304 	orr.w	r3, r3, #4
 800310c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003110:	4b04      	ldr	r3, [pc, #16]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003116:	4a03      	ldr	r2, [pc, #12]	; (8003124 <HAL_RCC_OscConfig+0x504>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003120:	e014      	b.n	800314c <HAL_RCC_OscConfig+0x52c>
 8003122:	bf00      	nop
 8003124:	40021000 	.word	0x40021000
 8003128:	40007000 	.word	0x40007000
 800312c:	4b9c      	ldr	r3, [pc, #624]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 800312e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003132:	4a9b      	ldr	r2, [pc, #620]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800313c:	4b98      	ldr	r3, [pc, #608]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003142:	4a97      	ldr	r2, [pc, #604]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 8003144:	f023 0304 	bic.w	r3, r3, #4
 8003148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d016      	beq.n	8003182 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003154:	f7fe f802 	bl	800115c <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315a:	e00a      	b.n	8003172 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315c:	f7fd fffe 	bl	800115c <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	f241 3288 	movw	r2, #5000	; 0x1388
 800316a:	4293      	cmp	r3, r2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e12a      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003172:	4b8b      	ldr	r3, [pc, #556]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 8003174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0ed      	beq.n	800315c <HAL_RCC_OscConfig+0x53c>
 8003180:	e015      	b.n	80031ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003182:	f7fd ffeb 	bl	800115c <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003188:	e00a      	b.n	80031a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318a:	f7fd ffe7 	bl	800115c <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	f241 3288 	movw	r2, #5000	; 0x1388
 8003198:	4293      	cmp	r3, r2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e113      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031a0:	4b7f      	ldr	r3, [pc, #508]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1ed      	bne.n	800318a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031ae:	7ffb      	ldrb	r3, [r7, #31]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d105      	bne.n	80031c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b4:	4b7a      	ldr	r3, [pc, #488]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 80031b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b8:	4a79      	ldr	r2, [pc, #484]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 80031ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031be:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 80fe 	beq.w	80033c6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	f040 80d0 	bne.w	8003374 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031d4:	4b72      	ldr	r3, [pc, #456]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f003 0203 	and.w	r2, r3, #3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d130      	bne.n	800324a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	3b01      	subs	r3, #1
 80031f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d127      	bne.n	800324a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003204:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003206:	429a      	cmp	r2, r3
 8003208:	d11f      	bne.n	800324a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003214:	2a07      	cmp	r2, #7
 8003216:	bf14      	ite	ne
 8003218:	2201      	movne	r2, #1
 800321a:	2200      	moveq	r2, #0
 800321c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800321e:	4293      	cmp	r3, r2
 8003220:	d113      	bne.n	800324a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322c:	085b      	lsrs	r3, r3, #1
 800322e:	3b01      	subs	r3, #1
 8003230:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003232:	429a      	cmp	r2, r3
 8003234:	d109      	bne.n	800324a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	085b      	lsrs	r3, r3, #1
 8003242:	3b01      	subs	r3, #1
 8003244:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003246:	429a      	cmp	r2, r3
 8003248:	d06e      	beq.n	8003328 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	2b0c      	cmp	r3, #12
 800324e:	d069      	beq.n	8003324 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003250:	4b53      	ldr	r3, [pc, #332]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d105      	bne.n	8003268 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800325c:	4b50      	ldr	r3, [pc, #320]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0ad      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800326c:	4b4c      	ldr	r3, [pc, #304]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a4b      	ldr	r2, [pc, #300]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 8003272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003276:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003278:	f7fd ff70 	bl	800115c <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003280:	f7fd ff6c 	bl	800115c <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e09a      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003292:	4b43      	ldr	r3, [pc, #268]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800329e:	4b40      	ldr	r3, [pc, #256]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	4b40      	ldr	r3, [pc, #256]	; (80033a4 <HAL_RCC_OscConfig+0x784>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032ae:	3a01      	subs	r2, #1
 80032b0:	0112      	lsls	r2, r2, #4
 80032b2:	4311      	orrs	r1, r2
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032b8:	0212      	lsls	r2, r2, #8
 80032ba:	4311      	orrs	r1, r2
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032c0:	0852      	lsrs	r2, r2, #1
 80032c2:	3a01      	subs	r2, #1
 80032c4:	0552      	lsls	r2, r2, #21
 80032c6:	4311      	orrs	r1, r2
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032cc:	0852      	lsrs	r2, r2, #1
 80032ce:	3a01      	subs	r2, #1
 80032d0:	0652      	lsls	r2, r2, #25
 80032d2:	4311      	orrs	r1, r2
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032d8:	0912      	lsrs	r2, r2, #4
 80032da:	0452      	lsls	r2, r2, #17
 80032dc:	430a      	orrs	r2, r1
 80032de:	4930      	ldr	r1, [pc, #192]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032e4:	4b2e      	ldr	r3, [pc, #184]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a2d      	ldr	r2, [pc, #180]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 80032ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032f0:	4b2b      	ldr	r3, [pc, #172]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4a2a      	ldr	r2, [pc, #168]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 80032f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032fc:	f7fd ff2e 	bl	800115c <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003304:	f7fd ff2a 	bl	800115c <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e058      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003316:	4b22      	ldr	r3, [pc, #136]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003322:	e050      	b.n	80033c6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e04f      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003328:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d148      	bne.n	80033c6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003334:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a19      	ldr	r2, [pc, #100]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 800333a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003340:	4b17      	ldr	r3, [pc, #92]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4a16      	ldr	r2, [pc, #88]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 8003346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800334a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800334c:	f7fd ff06 	bl	800115c <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003354:	f7fd ff02 	bl	800115c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e030      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003366:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0x734>
 8003372:	e028      	b.n	80033c6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2b0c      	cmp	r3, #12
 8003378:	d023      	beq.n	80033c2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a08      	ldr	r2, [pc, #32]	; (80033a0 <HAL_RCC_OscConfig+0x780>)
 8003380:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003386:	f7fd fee9 	bl	800115c <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800338c:	e00c      	b.n	80033a8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338e:	f7fd fee5 	bl	800115c <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d905      	bls.n	80033a8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e013      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
 80033a0:	40021000 	.word	0x40021000
 80033a4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_RCC_OscConfig+0x7b0>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1ec      	bne.n	800338e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_RCC_OscConfig+0x7b0>)
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	4905      	ldr	r1, [pc, #20]	; (80033d0 <HAL_RCC_OscConfig+0x7b0>)
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_RCC_OscConfig+0x7b4>)
 80033bc:	4013      	ands	r3, r2
 80033be:	60cb      	str	r3, [r1, #12]
 80033c0:	e001      	b.n	80033c6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3720      	adds	r7, #32
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000
 80033d4:	feeefffc 	.word	0xfeeefffc

080033d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0e7      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033ec:	4b75      	ldr	r3, [pc, #468]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d910      	bls.n	800341c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fa:	4b72      	ldr	r3, [pc, #456]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 0207 	bic.w	r2, r3, #7
 8003402:	4970      	ldr	r1, [pc, #448]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	4313      	orrs	r3, r2
 8003408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340a:	4b6e      	ldr	r3, [pc, #440]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0cf      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d010      	beq.n	800344a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	4b66      	ldr	r3, [pc, #408]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003434:	429a      	cmp	r2, r3
 8003436:	d908      	bls.n	800344a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003438:	4b63      	ldr	r3, [pc, #396]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4960      	ldr	r1, [pc, #384]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d04c      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b03      	cmp	r3, #3
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345e:	4b5a      	ldr	r3, [pc, #360]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d121      	bne.n	80034ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e0a6      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d107      	bne.n	8003486 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003476:	4b54      	ldr	r3, [pc, #336]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d115      	bne.n	80034ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e09a      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d107      	bne.n	800349e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800348e:	4b4e      	ldr	r3, [pc, #312]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e08e      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800349e:	4b4a      	ldr	r3, [pc, #296]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e086      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034ae:	4b46      	ldr	r3, [pc, #280]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f023 0203 	bic.w	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4943      	ldr	r1, [pc, #268]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c0:	f7fd fe4c 	bl	800115c <HAL_GetTick>
 80034c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c6:	e00a      	b.n	80034de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c8:	f7fd fe48 	bl	800115c <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e06e      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034de:	4b3a      	ldr	r3, [pc, #232]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 020c 	and.w	r2, r3, #12
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d1eb      	bne.n	80034c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d010      	beq.n	800351e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	4b31      	ldr	r3, [pc, #196]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003508:	429a      	cmp	r2, r3
 800350a:	d208      	bcs.n	800351e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800350c:	4b2e      	ldr	r3, [pc, #184]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	492b      	ldr	r1, [pc, #172]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800351e:	4b29      	ldr	r3, [pc, #164]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d210      	bcs.n	800354e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352c:	4b25      	ldr	r3, [pc, #148]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f023 0207 	bic.w	r2, r3, #7
 8003534:	4923      	ldr	r1, [pc, #140]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	4313      	orrs	r3, r2
 800353a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800353c:	4b21      	ldr	r3, [pc, #132]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d001      	beq.n	800354e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e036      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	d008      	beq.n	800356c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800355a:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	4918      	ldr	r1, [pc, #96]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003568:	4313      	orrs	r3, r2
 800356a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d009      	beq.n	800358c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003578:	4b13      	ldr	r3, [pc, #76]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4910      	ldr	r1, [pc, #64]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003588:	4313      	orrs	r3, r2
 800358a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800358c:	f000 f824 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 8003590:	4602      	mov	r2, r0
 8003592:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	490b      	ldr	r1, [pc, #44]	; (80035cc <HAL_RCC_ClockConfig+0x1f4>)
 800359e:	5ccb      	ldrb	r3, [r1, r3]
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
 80035a8:	4a09      	ldr	r2, [pc, #36]	; (80035d0 <HAL_RCC_ClockConfig+0x1f8>)
 80035aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <HAL_RCC_ClockConfig+0x1fc>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fd fd83 	bl	80010bc <HAL_InitTick>
 80035b6:	4603      	mov	r3, r0
 80035b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80035ba:	7afb      	ldrb	r3, [r7, #11]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40022000 	.word	0x40022000
 80035c8:	40021000 	.word	0x40021000
 80035cc:	08004aac 	.word	0x08004aac
 80035d0:	20000000 	.word	0x20000000
 80035d4:	20000004 	.word	0x20000004

080035d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	b089      	sub	sp, #36	; 0x24
 80035dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	2300      	movs	r3, #0
 80035e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035e6:	4b3e      	ldr	r3, [pc, #248]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 030c 	and.w	r3, r3, #12
 80035ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035f0:	4b3b      	ldr	r3, [pc, #236]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0303 	and.w	r3, r3, #3
 80035f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0x34>
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	2b0c      	cmp	r3, #12
 8003604:	d121      	bne.n	800364a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d11e      	bne.n	800364a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800360c:	4b34      	ldr	r3, [pc, #208]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d107      	bne.n	8003628 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003618:	4b31      	ldr	r3, [pc, #196]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800361a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	61fb      	str	r3, [r7, #28]
 8003626:	e005      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003628:	4b2d      	ldr	r3, [pc, #180]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003634:	4a2b      	ldr	r2, [pc, #172]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800363c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10d      	bne.n	8003660 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003648:	e00a      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	2b04      	cmp	r3, #4
 800364e:	d102      	bne.n	8003656 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003650:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003652:	61bb      	str	r3, [r7, #24]
 8003654:	e004      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	2b08      	cmp	r3, #8
 800365a:	d101      	bne.n	8003660 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800365c:	4b23      	ldr	r3, [pc, #140]	; (80036ec <HAL_RCC_GetSysClockFreq+0x114>)
 800365e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d134      	bne.n	80036d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003666:	4b1e      	ldr	r3, [pc, #120]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d003      	beq.n	800367e <HAL_RCC_GetSysClockFreq+0xa6>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d003      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0xac>
 800367c:	e005      	b.n	800368a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800367e:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003680:	617b      	str	r3, [r7, #20]
      break;
 8003682:	e005      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003684:	4b19      	ldr	r3, [pc, #100]	; (80036ec <HAL_RCC_GetSysClockFreq+0x114>)
 8003686:	617b      	str	r3, [r7, #20]
      break;
 8003688:	e002      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	617b      	str	r3, [r7, #20]
      break;
 800368e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003690:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	091b      	lsrs	r3, r3, #4
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	3301      	adds	r3, #1
 800369c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800369e:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	0a1b      	lsrs	r3, r3, #8
 80036a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	fb03 f202 	mul.w	r2, r3, r2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036b6:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	0e5b      	lsrs	r3, r3, #25
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	3301      	adds	r3, #1
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036d0:	69bb      	ldr	r3, [r7, #24]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3724      	adds	r7, #36	; 0x24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000
 80036e4:	08004abc 	.word	0x08004abc
 80036e8:	00f42400 	.word	0x00f42400
 80036ec:	007a1200 	.word	0x007a1200

080036f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036fc:	4b2a      	ldr	r3, [pc, #168]	; (80037a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003708:	f7ff fa26 	bl	8002b58 <HAL_PWREx_GetVoltageRange>
 800370c:	6178      	str	r0, [r7, #20]
 800370e:	e014      	b.n	800373a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003710:	4b25      	ldr	r3, [pc, #148]	; (80037a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003714:	4a24      	ldr	r2, [pc, #144]	; (80037a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371a:	6593      	str	r3, [r2, #88]	; 0x58
 800371c:	4b22      	ldr	r3, [pc, #136]	; (80037a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800371e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003728:	f7ff fa16 	bl	8002b58 <HAL_PWREx_GetVoltageRange>
 800372c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800372e:	4b1e      	ldr	r3, [pc, #120]	; (80037a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003732:	4a1d      	ldr	r2, [pc, #116]	; (80037a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003738:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003740:	d10b      	bne.n	800375a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b80      	cmp	r3, #128	; 0x80
 8003746:	d919      	bls.n	800377c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2ba0      	cmp	r3, #160	; 0xa0
 800374c:	d902      	bls.n	8003754 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800374e:	2302      	movs	r3, #2
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	e013      	b.n	800377c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003754:	2301      	movs	r3, #1
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	e010      	b.n	800377c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b80      	cmp	r3, #128	; 0x80
 800375e:	d902      	bls.n	8003766 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003760:	2303      	movs	r3, #3
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	e00a      	b.n	800377c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b80      	cmp	r3, #128	; 0x80
 800376a:	d102      	bne.n	8003772 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800376c:	2302      	movs	r3, #2
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	e004      	b.n	800377c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b70      	cmp	r3, #112	; 0x70
 8003776:	d101      	bne.n	800377c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003778:	2301      	movs	r3, #1
 800377a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800377c:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f023 0207 	bic.w	r2, r3, #7
 8003784:	4909      	ldr	r1, [pc, #36]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800378c:	4b07      	ldr	r3, [pc, #28]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	429a      	cmp	r2, r3
 8003798:	d001      	beq.n	800379e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40022000 	.word	0x40022000

080037b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037b8:	2300      	movs	r3, #0
 80037ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037bc:	2300      	movs	r3, #0
 80037be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d041      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037d4:	d02a      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037da:	d824      	bhi.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037e0:	d008      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037e6:	d81e      	bhi.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80037ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037f0:	d010      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037f2:	e018      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037f4:	4b86      	ldr	r3, [pc, #536]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4a85      	ldr	r2, [pc, #532]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003800:	e015      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3304      	adds	r3, #4
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fabb 	bl	8003d84 <RCCEx_PLLSAI1_Config>
 800380e:	4603      	mov	r3, r0
 8003810:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003812:	e00c      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3320      	adds	r3, #32
 8003818:	2100      	movs	r1, #0
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fba6 	bl	8003f6c <RCCEx_PLLSAI2_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003824:	e003      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	74fb      	strb	r3, [r7, #19]
      break;
 800382a:	e000      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800382c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800382e:	7cfb      	ldrb	r3, [r7, #19]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10b      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003834:	4b76      	ldr	r3, [pc, #472]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003842:	4973      	ldr	r1, [pc, #460]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800384a:	e001      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d041      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003860:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003864:	d02a      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003866:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800386a:	d824      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800386c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003870:	d008      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003872:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003876:	d81e      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00a      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800387c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003880:	d010      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003882:	e018      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003884:	4b62      	ldr	r3, [pc, #392]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4a61      	ldr	r2, [pc, #388]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003890:	e015      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3304      	adds	r3, #4
 8003896:	2100      	movs	r1, #0
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fa73 	bl	8003d84 <RCCEx_PLLSAI1_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038a2:	e00c      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3320      	adds	r3, #32
 80038a8:	2100      	movs	r1, #0
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fb5e 	bl	8003f6c <RCCEx_PLLSAI2_Config>
 80038b0:	4603      	mov	r3, r0
 80038b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038b4:	e003      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	74fb      	strb	r3, [r7, #19]
      break;
 80038ba:	e000      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80038bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038be:	7cfb      	ldrb	r3, [r7, #19]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10b      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038c4:	4b52      	ldr	r3, [pc, #328]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038d2:	494f      	ldr	r1, [pc, #316]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038da:	e001      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038dc:	7cfb      	ldrb	r3, [r7, #19]
 80038de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 80a0 	beq.w	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ee:	2300      	movs	r3, #0
 80038f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038f2:	4b47      	ldr	r3, [pc, #284]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003902:	2300      	movs	r3, #0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00d      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003908:	4b41      	ldr	r3, [pc, #260]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390c:	4a40      	ldr	r2, [pc, #256]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003912:	6593      	str	r3, [r2, #88]	; 0x58
 8003914:	4b3e      	ldr	r3, [pc, #248]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003920:	2301      	movs	r3, #1
 8003922:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003924:	4b3b      	ldr	r3, [pc, #236]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a3a      	ldr	r2, [pc, #232]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800392a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003930:	f7fd fc14 	bl	800115c <HAL_GetTick>
 8003934:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003936:	e009      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003938:	f7fd fc10 	bl	800115c <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d902      	bls.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	74fb      	strb	r3, [r7, #19]
        break;
 800394a:	e005      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800394c:	4b31      	ldr	r3, [pc, #196]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0ef      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003958:	7cfb      	ldrb	r3, [r7, #19]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d15c      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800395e:	4b2c      	ldr	r3, [pc, #176]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003968:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01f      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	429a      	cmp	r2, r3
 800397a:	d019      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800397c:	4b24      	ldr	r3, [pc, #144]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003986:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003988:	4b21      	ldr	r3, [pc, #132]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800398a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398e:	4a20      	ldr	r2, [pc, #128]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003998:	4b1d      	ldr	r3, [pc, #116]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399e:	4a1c      	ldr	r2, [pc, #112]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039a8:	4a19      	ldr	r2, [pc, #100]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d016      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ba:	f7fd fbcf 	bl	800115c <HAL_GetTick>
 80039be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039c0:	e00b      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c2:	f7fd fbcb 	bl	800115c <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d902      	bls.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	74fb      	strb	r3, [r7, #19]
            break;
 80039d8:	e006      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039da:	4b0d      	ldr	r3, [pc, #52]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0ec      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80039e8:	7cfb      	ldrb	r3, [r7, #19]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ee:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039fe:	4904      	ldr	r1, [pc, #16]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a06:	e009      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a08:	7cfb      	ldrb	r3, [r7, #19]
 8003a0a:	74bb      	strb	r3, [r7, #18]
 8003a0c:	e006      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003a0e:	bf00      	nop
 8003a10:	40021000 	.word	0x40021000
 8003a14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a18:	7cfb      	ldrb	r3, [r7, #19]
 8003a1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a1c:	7c7b      	ldrb	r3, [r7, #17]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d105      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a22:	4b9e      	ldr	r3, [pc, #632]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	4a9d      	ldr	r2, [pc, #628]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a3a:	4b98      	ldr	r3, [pc, #608]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a40:	f023 0203 	bic.w	r2, r3, #3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	4994      	ldr	r1, [pc, #592]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a5c:	4b8f      	ldr	r3, [pc, #572]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a62:	f023 020c 	bic.w	r2, r3, #12
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6a:	498c      	ldr	r1, [pc, #560]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a7e:	4b87      	ldr	r3, [pc, #540]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	4983      	ldr	r1, [pc, #524]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003aa0:	4b7e      	ldr	r3, [pc, #504]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	497b      	ldr	r1, [pc, #492]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0310 	and.w	r3, r3, #16
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ac2:	4b76      	ldr	r3, [pc, #472]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad0:	4972      	ldr	r1, [pc, #456]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0320 	and.w	r3, r3, #32
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ae4:	4b6d      	ldr	r3, [pc, #436]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af2:	496a      	ldr	r1, [pc, #424]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b06:	4b65      	ldr	r3, [pc, #404]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b14:	4961      	ldr	r1, [pc, #388]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b28:	4b5c      	ldr	r3, [pc, #368]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b36:	4959      	ldr	r1, [pc, #356]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b4a:	4b54      	ldr	r3, [pc, #336]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b58:	4950      	ldr	r1, [pc, #320]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b6c:	4b4b      	ldr	r3, [pc, #300]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7a:	4948      	ldr	r1, [pc, #288]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b8e:	4b43      	ldr	r3, [pc, #268]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9c:	493f      	ldr	r1, [pc, #252]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d028      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bb0:	4b3a      	ldr	r3, [pc, #232]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bbe:	4937      	ldr	r1, [pc, #220]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bce:	d106      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bd0:	4b32      	ldr	r3, [pc, #200]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4a31      	ldr	r2, [pc, #196]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bda:	60d3      	str	r3, [r2, #12]
 8003bdc:	e011      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003be6:	d10c      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3304      	adds	r3, #4
 8003bec:	2101      	movs	r1, #1
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 f8c8 	bl	8003d84 <RCCEx_PLLSAI1_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003bf8:	7cfb      	ldrb	r3, [r7, #19]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003bfe:	7cfb      	ldrb	r3, [r7, #19]
 8003c00:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d028      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c0e:	4b23      	ldr	r3, [pc, #140]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	491f      	ldr	r1, [pc, #124]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c2c:	d106      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c2e:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	4a1a      	ldr	r2, [pc, #104]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c38:	60d3      	str	r3, [r2, #12]
 8003c3a:	e011      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3304      	adds	r3, #4
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 f899 	bl	8003d84 <RCCEx_PLLSAI1_Config>
 8003c52:	4603      	mov	r3, r0
 8003c54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c56:	7cfb      	ldrb	r3, [r7, #19]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003c5c:	7cfb      	ldrb	r3, [r7, #19]
 8003c5e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d02b      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7a:	4908      	ldr	r1, [pc, #32]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c8a:	d109      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c8c:	4b03      	ldr	r3, [pc, #12]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	4a02      	ldr	r2, [pc, #8]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c96:	60d3      	str	r3, [r2, #12]
 8003c98:	e014      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3304      	adds	r3, #4
 8003cae:	2101      	movs	r1, #1
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 f867 	bl	8003d84 <RCCEx_PLLSAI1_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cba:	7cfb      	ldrb	r3, [r7, #19]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003cc0:	7cfb      	ldrb	r3, [r7, #19]
 8003cc2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d02f      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cd0:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cde:	4928      	ldr	r1, [pc, #160]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cee:	d10d      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	2102      	movs	r1, #2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f844 	bl	8003d84 <RCCEx_PLLSAI1_Config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d00:	7cfb      	ldrb	r3, [r7, #19]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d014      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d06:	7cfb      	ldrb	r3, [r7, #19]
 8003d08:	74bb      	strb	r3, [r7, #18]
 8003d0a:	e011      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d14:	d10c      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3320      	adds	r3, #32
 8003d1a:	2102      	movs	r1, #2
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 f925 	bl	8003f6c <RCCEx_PLLSAI2_Config>
 8003d22:	4603      	mov	r3, r0
 8003d24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d26:	7cfb      	ldrb	r3, [r7, #19]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d2c:	7cfb      	ldrb	r3, [r7, #19]
 8003d2e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d3c:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d42:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d4a:	490d      	ldr	r1, [pc, #52]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00b      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d5e:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d6e:	4904      	ldr	r1, [pc, #16]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d76:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40021000 	.word	0x40021000

08003d84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d92:	4b75      	ldr	r3, [pc, #468]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d018      	beq.n	8003dd0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d9e:	4b72      	ldr	r3, [pc, #456]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f003 0203 	and.w	r2, r3, #3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d10d      	bne.n	8003dca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
       ||
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d009      	beq.n	8003dca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003db6:	4b6c      	ldr	r3, [pc, #432]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	091b      	lsrs	r3, r3, #4
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
       ||
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d047      	beq.n	8003e5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
 8003dce:	e044      	b.n	8003e5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b03      	cmp	r3, #3
 8003dd6:	d018      	beq.n	8003e0a <RCCEx_PLLSAI1_Config+0x86>
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d825      	bhi.n	8003e28 <RCCEx_PLLSAI1_Config+0xa4>
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d002      	beq.n	8003de6 <RCCEx_PLLSAI1_Config+0x62>
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d009      	beq.n	8003df8 <RCCEx_PLLSAI1_Config+0x74>
 8003de4:	e020      	b.n	8003e28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003de6:	4b60      	ldr	r3, [pc, #384]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d11d      	bne.n	8003e2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003df6:	e01a      	b.n	8003e2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003df8:	4b5b      	ldr	r3, [pc, #364]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d116      	bne.n	8003e32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e08:	e013      	b.n	8003e32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e0a:	4b57      	ldr	r3, [pc, #348]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10f      	bne.n	8003e36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e16:	4b54      	ldr	r3, [pc, #336]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e26:	e006      	b.n	8003e36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e2c:	e004      	b.n	8003e38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e2e:	bf00      	nop
 8003e30:	e002      	b.n	8003e38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e32:	bf00      	nop
 8003e34:	e000      	b.n	8003e38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e36:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10d      	bne.n	8003e5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e3e:	4b4a      	ldr	r3, [pc, #296]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6819      	ldr	r1, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	430b      	orrs	r3, r1
 8003e54:	4944      	ldr	r1, [pc, #272]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d17d      	bne.n	8003f5c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e60:	4b41      	ldr	r3, [pc, #260]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a40      	ldr	r2, [pc, #256]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e6c:	f7fd f976 	bl	800115c <HAL_GetTick>
 8003e70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e72:	e009      	b.n	8003e88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e74:	f7fd f972 	bl	800115c <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d902      	bls.n	8003e88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	73fb      	strb	r3, [r7, #15]
        break;
 8003e86:	e005      	b.n	8003e94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e88:	4b37      	ldr	r3, [pc, #220]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1ef      	bne.n	8003e74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d160      	bne.n	8003f5c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d111      	bne.n	8003ec4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ea0:	4b31      	ldr	r3, [pc, #196]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6892      	ldr	r2, [r2, #8]
 8003eb0:	0211      	lsls	r1, r2, #8
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	68d2      	ldr	r2, [r2, #12]
 8003eb6:	0912      	lsrs	r2, r2, #4
 8003eb8:	0452      	lsls	r2, r2, #17
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	492a      	ldr	r1, [pc, #168]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	610b      	str	r3, [r1, #16]
 8003ec2:	e027      	b.n	8003f14 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d112      	bne.n	8003ef0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003eca:	4b27      	ldr	r3, [pc, #156]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ed2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6892      	ldr	r2, [r2, #8]
 8003eda:	0211      	lsls	r1, r2, #8
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6912      	ldr	r2, [r2, #16]
 8003ee0:	0852      	lsrs	r2, r2, #1
 8003ee2:	3a01      	subs	r2, #1
 8003ee4:	0552      	lsls	r2, r2, #21
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	491f      	ldr	r1, [pc, #124]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	610b      	str	r3, [r1, #16]
 8003eee:	e011      	b.n	8003f14 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ef0:	4b1d      	ldr	r3, [pc, #116]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ef8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6892      	ldr	r2, [r2, #8]
 8003f00:	0211      	lsls	r1, r2, #8
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6952      	ldr	r2, [r2, #20]
 8003f06:	0852      	lsrs	r2, r2, #1
 8003f08:	3a01      	subs	r2, #1
 8003f0a:	0652      	lsls	r2, r2, #25
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	4916      	ldr	r1, [pc, #88]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f14:	4b14      	ldr	r3, [pc, #80]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a13      	ldr	r2, [pc, #76]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f20:	f7fd f91c 	bl	800115c <HAL_GetTick>
 8003f24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f26:	e009      	b.n	8003f3c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f28:	f7fd f918 	bl	800115c <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d902      	bls.n	8003f3c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	73fb      	strb	r3, [r7, #15]
          break;
 8003f3a:	e005      	b.n	8003f48 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0ef      	beq.n	8003f28 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f4e:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f50:	691a      	ldr	r2, [r3, #16]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	4904      	ldr	r1, [pc, #16]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000

08003f6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f7a:	4b6a      	ldr	r3, [pc, #424]	; (8004124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d018      	beq.n	8003fb8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f86:	4b67      	ldr	r3, [pc, #412]	; (8004124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f003 0203 	and.w	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d10d      	bne.n	8003fb2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
       ||
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d009      	beq.n	8003fb2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f9e:	4b61      	ldr	r3, [pc, #388]	; (8004124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	091b      	lsrs	r3, r3, #4
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
       ||
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d047      	beq.n	8004042 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	73fb      	strb	r3, [r7, #15]
 8003fb6:	e044      	b.n	8004042 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	d018      	beq.n	8003ff2 <RCCEx_PLLSAI2_Config+0x86>
 8003fc0:	2b03      	cmp	r3, #3
 8003fc2:	d825      	bhi.n	8004010 <RCCEx_PLLSAI2_Config+0xa4>
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d002      	beq.n	8003fce <RCCEx_PLLSAI2_Config+0x62>
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d009      	beq.n	8003fe0 <RCCEx_PLLSAI2_Config+0x74>
 8003fcc:	e020      	b.n	8004010 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fce:	4b55      	ldr	r3, [pc, #340]	; (8004124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d11d      	bne.n	8004016 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fde:	e01a      	b.n	8004016 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fe0:	4b50      	ldr	r3, [pc, #320]	; (8004124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d116      	bne.n	800401a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff0:	e013      	b.n	800401a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ff2:	4b4c      	ldr	r3, [pc, #304]	; (8004124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10f      	bne.n	800401e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ffe:	4b49      	ldr	r3, [pc, #292]	; (8004124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d109      	bne.n	800401e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800400e:	e006      	b.n	800401e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	73fb      	strb	r3, [r7, #15]
      break;
 8004014:	e004      	b.n	8004020 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004016:	bf00      	nop
 8004018:	e002      	b.n	8004020 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800401a:	bf00      	nop
 800401c:	e000      	b.n	8004020 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800401e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10d      	bne.n	8004042 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004026:	4b3f      	ldr	r3, [pc, #252]	; (8004124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6819      	ldr	r1, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	3b01      	subs	r3, #1
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	430b      	orrs	r3, r1
 800403c:	4939      	ldr	r1, [pc, #228]	; (8004124 <RCCEx_PLLSAI2_Config+0x1b8>)
 800403e:	4313      	orrs	r3, r2
 8004040:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d167      	bne.n	8004118 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004048:	4b36      	ldr	r3, [pc, #216]	; (8004124 <RCCEx_PLLSAI2_Config+0x1b8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a35      	ldr	r2, [pc, #212]	; (8004124 <RCCEx_PLLSAI2_Config+0x1b8>)
 800404e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004052:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004054:	f7fd f882 	bl	800115c <HAL_GetTick>
 8004058:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800405a:	e009      	b.n	8004070 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800405c:	f7fd f87e 	bl	800115c <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d902      	bls.n	8004070 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	73fb      	strb	r3, [r7, #15]
        break;
 800406e:	e005      	b.n	800407c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004070:	4b2c      	ldr	r3, [pc, #176]	; (8004124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1ef      	bne.n	800405c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800407c:	7bfb      	ldrb	r3, [r7, #15]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d14a      	bne.n	8004118 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d111      	bne.n	80040ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004088:	4b26      	ldr	r3, [pc, #152]	; (8004124 <RCCEx_PLLSAI2_Config+0x1b8>)
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6892      	ldr	r2, [r2, #8]
 8004098:	0211      	lsls	r1, r2, #8
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68d2      	ldr	r2, [r2, #12]
 800409e:	0912      	lsrs	r2, r2, #4
 80040a0:	0452      	lsls	r2, r2, #17
 80040a2:	430a      	orrs	r2, r1
 80040a4:	491f      	ldr	r1, [pc, #124]	; (8004124 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	614b      	str	r3, [r1, #20]
 80040aa:	e011      	b.n	80040d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040ac:	4b1d      	ldr	r3, [pc, #116]	; (8004124 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6892      	ldr	r2, [r2, #8]
 80040bc:	0211      	lsls	r1, r2, #8
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6912      	ldr	r2, [r2, #16]
 80040c2:	0852      	lsrs	r2, r2, #1
 80040c4:	3a01      	subs	r2, #1
 80040c6:	0652      	lsls	r2, r2, #25
 80040c8:	430a      	orrs	r2, r1
 80040ca:	4916      	ldr	r1, [pc, #88]	; (8004124 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80040d0:	4b14      	ldr	r3, [pc, #80]	; (8004124 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a13      	ldr	r2, [pc, #76]	; (8004124 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040dc:	f7fd f83e 	bl	800115c <HAL_GetTick>
 80040e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040e2:	e009      	b.n	80040f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040e4:	f7fd f83a 	bl	800115c <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d902      	bls.n	80040f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	73fb      	strb	r3, [r7, #15]
          break;
 80040f6:	e005      	b.n	8004104 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0ef      	beq.n	80040e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <RCCEx_PLLSAI2_Config+0x1b8>)
 800410c:	695a      	ldr	r2, [r3, #20]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	4904      	ldr	r1, [pc, #16]	; (8004124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004114:	4313      	orrs	r3, r2
 8004116:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004118:	7bfb      	ldrb	r3, [r7, #15]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40021000 	.word	0x40021000

08004128 <__errno>:
 8004128:	4b01      	ldr	r3, [pc, #4]	; (8004130 <__errno+0x8>)
 800412a:	6818      	ldr	r0, [r3, #0]
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	2000000c 	.word	0x2000000c

08004134 <__libc_init_array>:
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	4d0d      	ldr	r5, [pc, #52]	; (800416c <__libc_init_array+0x38>)
 8004138:	4c0d      	ldr	r4, [pc, #52]	; (8004170 <__libc_init_array+0x3c>)
 800413a:	1b64      	subs	r4, r4, r5
 800413c:	10a4      	asrs	r4, r4, #2
 800413e:	2600      	movs	r6, #0
 8004140:	42a6      	cmp	r6, r4
 8004142:	d109      	bne.n	8004158 <__libc_init_array+0x24>
 8004144:	4d0b      	ldr	r5, [pc, #44]	; (8004174 <__libc_init_array+0x40>)
 8004146:	4c0c      	ldr	r4, [pc, #48]	; (8004178 <__libc_init_array+0x44>)
 8004148:	f000 fc8e 	bl	8004a68 <_init>
 800414c:	1b64      	subs	r4, r4, r5
 800414e:	10a4      	asrs	r4, r4, #2
 8004150:	2600      	movs	r6, #0
 8004152:	42a6      	cmp	r6, r4
 8004154:	d105      	bne.n	8004162 <__libc_init_array+0x2e>
 8004156:	bd70      	pop	{r4, r5, r6, pc}
 8004158:	f855 3b04 	ldr.w	r3, [r5], #4
 800415c:	4798      	blx	r3
 800415e:	3601      	adds	r6, #1
 8004160:	e7ee      	b.n	8004140 <__libc_init_array+0xc>
 8004162:	f855 3b04 	ldr.w	r3, [r5], #4
 8004166:	4798      	blx	r3
 8004168:	3601      	adds	r6, #1
 800416a:	e7f2      	b.n	8004152 <__libc_init_array+0x1e>
 800416c:	08004b20 	.word	0x08004b20
 8004170:	08004b20 	.word	0x08004b20
 8004174:	08004b20 	.word	0x08004b20
 8004178:	08004b24 	.word	0x08004b24

0800417c <memset>:
 800417c:	4402      	add	r2, r0
 800417e:	4603      	mov	r3, r0
 8004180:	4293      	cmp	r3, r2
 8004182:	d100      	bne.n	8004186 <memset+0xa>
 8004184:	4770      	bx	lr
 8004186:	f803 1b01 	strb.w	r1, [r3], #1
 800418a:	e7f9      	b.n	8004180 <memset+0x4>

0800418c <siprintf>:
 800418c:	b40e      	push	{r1, r2, r3}
 800418e:	b500      	push	{lr}
 8004190:	b09c      	sub	sp, #112	; 0x70
 8004192:	ab1d      	add	r3, sp, #116	; 0x74
 8004194:	9002      	str	r0, [sp, #8]
 8004196:	9006      	str	r0, [sp, #24]
 8004198:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800419c:	4809      	ldr	r0, [pc, #36]	; (80041c4 <siprintf+0x38>)
 800419e:	9107      	str	r1, [sp, #28]
 80041a0:	9104      	str	r1, [sp, #16]
 80041a2:	4909      	ldr	r1, [pc, #36]	; (80041c8 <siprintf+0x3c>)
 80041a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80041a8:	9105      	str	r1, [sp, #20]
 80041aa:	6800      	ldr	r0, [r0, #0]
 80041ac:	9301      	str	r3, [sp, #4]
 80041ae:	a902      	add	r1, sp, #8
 80041b0:	f000 f868 	bl	8004284 <_svfiprintf_r>
 80041b4:	9b02      	ldr	r3, [sp, #8]
 80041b6:	2200      	movs	r2, #0
 80041b8:	701a      	strb	r2, [r3, #0]
 80041ba:	b01c      	add	sp, #112	; 0x70
 80041bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80041c0:	b003      	add	sp, #12
 80041c2:	4770      	bx	lr
 80041c4:	2000000c 	.word	0x2000000c
 80041c8:	ffff0208 	.word	0xffff0208

080041cc <__ssputs_r>:
 80041cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041d0:	688e      	ldr	r6, [r1, #8]
 80041d2:	429e      	cmp	r6, r3
 80041d4:	4682      	mov	sl, r0
 80041d6:	460c      	mov	r4, r1
 80041d8:	4690      	mov	r8, r2
 80041da:	461f      	mov	r7, r3
 80041dc:	d838      	bhi.n	8004250 <__ssputs_r+0x84>
 80041de:	898a      	ldrh	r2, [r1, #12]
 80041e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041e4:	d032      	beq.n	800424c <__ssputs_r+0x80>
 80041e6:	6825      	ldr	r5, [r4, #0]
 80041e8:	6909      	ldr	r1, [r1, #16]
 80041ea:	eba5 0901 	sub.w	r9, r5, r1
 80041ee:	6965      	ldr	r5, [r4, #20]
 80041f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041f8:	3301      	adds	r3, #1
 80041fa:	444b      	add	r3, r9
 80041fc:	106d      	asrs	r5, r5, #1
 80041fe:	429d      	cmp	r5, r3
 8004200:	bf38      	it	cc
 8004202:	461d      	movcc	r5, r3
 8004204:	0553      	lsls	r3, r2, #21
 8004206:	d531      	bpl.n	800426c <__ssputs_r+0xa0>
 8004208:	4629      	mov	r1, r5
 800420a:	f000 fb63 	bl	80048d4 <_malloc_r>
 800420e:	4606      	mov	r6, r0
 8004210:	b950      	cbnz	r0, 8004228 <__ssputs_r+0x5c>
 8004212:	230c      	movs	r3, #12
 8004214:	f8ca 3000 	str.w	r3, [sl]
 8004218:	89a3      	ldrh	r3, [r4, #12]
 800421a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800421e:	81a3      	strh	r3, [r4, #12]
 8004220:	f04f 30ff 	mov.w	r0, #4294967295
 8004224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004228:	6921      	ldr	r1, [r4, #16]
 800422a:	464a      	mov	r2, r9
 800422c:	f000 fabe 	bl	80047ac <memcpy>
 8004230:	89a3      	ldrh	r3, [r4, #12]
 8004232:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800423a:	81a3      	strh	r3, [r4, #12]
 800423c:	6126      	str	r6, [r4, #16]
 800423e:	6165      	str	r5, [r4, #20]
 8004240:	444e      	add	r6, r9
 8004242:	eba5 0509 	sub.w	r5, r5, r9
 8004246:	6026      	str	r6, [r4, #0]
 8004248:	60a5      	str	r5, [r4, #8]
 800424a:	463e      	mov	r6, r7
 800424c:	42be      	cmp	r6, r7
 800424e:	d900      	bls.n	8004252 <__ssputs_r+0x86>
 8004250:	463e      	mov	r6, r7
 8004252:	6820      	ldr	r0, [r4, #0]
 8004254:	4632      	mov	r2, r6
 8004256:	4641      	mov	r1, r8
 8004258:	f000 fab6 	bl	80047c8 <memmove>
 800425c:	68a3      	ldr	r3, [r4, #8]
 800425e:	1b9b      	subs	r3, r3, r6
 8004260:	60a3      	str	r3, [r4, #8]
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	4433      	add	r3, r6
 8004266:	6023      	str	r3, [r4, #0]
 8004268:	2000      	movs	r0, #0
 800426a:	e7db      	b.n	8004224 <__ssputs_r+0x58>
 800426c:	462a      	mov	r2, r5
 800426e:	f000 fba5 	bl	80049bc <_realloc_r>
 8004272:	4606      	mov	r6, r0
 8004274:	2800      	cmp	r0, #0
 8004276:	d1e1      	bne.n	800423c <__ssputs_r+0x70>
 8004278:	6921      	ldr	r1, [r4, #16]
 800427a:	4650      	mov	r0, sl
 800427c:	f000 fabe 	bl	80047fc <_free_r>
 8004280:	e7c7      	b.n	8004212 <__ssputs_r+0x46>
	...

08004284 <_svfiprintf_r>:
 8004284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004288:	4698      	mov	r8, r3
 800428a:	898b      	ldrh	r3, [r1, #12]
 800428c:	061b      	lsls	r3, r3, #24
 800428e:	b09d      	sub	sp, #116	; 0x74
 8004290:	4607      	mov	r7, r0
 8004292:	460d      	mov	r5, r1
 8004294:	4614      	mov	r4, r2
 8004296:	d50e      	bpl.n	80042b6 <_svfiprintf_r+0x32>
 8004298:	690b      	ldr	r3, [r1, #16]
 800429a:	b963      	cbnz	r3, 80042b6 <_svfiprintf_r+0x32>
 800429c:	2140      	movs	r1, #64	; 0x40
 800429e:	f000 fb19 	bl	80048d4 <_malloc_r>
 80042a2:	6028      	str	r0, [r5, #0]
 80042a4:	6128      	str	r0, [r5, #16]
 80042a6:	b920      	cbnz	r0, 80042b2 <_svfiprintf_r+0x2e>
 80042a8:	230c      	movs	r3, #12
 80042aa:	603b      	str	r3, [r7, #0]
 80042ac:	f04f 30ff 	mov.w	r0, #4294967295
 80042b0:	e0d1      	b.n	8004456 <_svfiprintf_r+0x1d2>
 80042b2:	2340      	movs	r3, #64	; 0x40
 80042b4:	616b      	str	r3, [r5, #20]
 80042b6:	2300      	movs	r3, #0
 80042b8:	9309      	str	r3, [sp, #36]	; 0x24
 80042ba:	2320      	movs	r3, #32
 80042bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80042c4:	2330      	movs	r3, #48	; 0x30
 80042c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004470 <_svfiprintf_r+0x1ec>
 80042ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042ce:	f04f 0901 	mov.w	r9, #1
 80042d2:	4623      	mov	r3, r4
 80042d4:	469a      	mov	sl, r3
 80042d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042da:	b10a      	cbz	r2, 80042e0 <_svfiprintf_r+0x5c>
 80042dc:	2a25      	cmp	r2, #37	; 0x25
 80042de:	d1f9      	bne.n	80042d4 <_svfiprintf_r+0x50>
 80042e0:	ebba 0b04 	subs.w	fp, sl, r4
 80042e4:	d00b      	beq.n	80042fe <_svfiprintf_r+0x7a>
 80042e6:	465b      	mov	r3, fp
 80042e8:	4622      	mov	r2, r4
 80042ea:	4629      	mov	r1, r5
 80042ec:	4638      	mov	r0, r7
 80042ee:	f7ff ff6d 	bl	80041cc <__ssputs_r>
 80042f2:	3001      	adds	r0, #1
 80042f4:	f000 80aa 	beq.w	800444c <_svfiprintf_r+0x1c8>
 80042f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042fa:	445a      	add	r2, fp
 80042fc:	9209      	str	r2, [sp, #36]	; 0x24
 80042fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 80a2 	beq.w	800444c <_svfiprintf_r+0x1c8>
 8004308:	2300      	movs	r3, #0
 800430a:	f04f 32ff 	mov.w	r2, #4294967295
 800430e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004312:	f10a 0a01 	add.w	sl, sl, #1
 8004316:	9304      	str	r3, [sp, #16]
 8004318:	9307      	str	r3, [sp, #28]
 800431a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800431e:	931a      	str	r3, [sp, #104]	; 0x68
 8004320:	4654      	mov	r4, sl
 8004322:	2205      	movs	r2, #5
 8004324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004328:	4851      	ldr	r0, [pc, #324]	; (8004470 <_svfiprintf_r+0x1ec>)
 800432a:	f7fb ff51 	bl	80001d0 <memchr>
 800432e:	9a04      	ldr	r2, [sp, #16]
 8004330:	b9d8      	cbnz	r0, 800436a <_svfiprintf_r+0xe6>
 8004332:	06d0      	lsls	r0, r2, #27
 8004334:	bf44      	itt	mi
 8004336:	2320      	movmi	r3, #32
 8004338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800433c:	0711      	lsls	r1, r2, #28
 800433e:	bf44      	itt	mi
 8004340:	232b      	movmi	r3, #43	; 0x2b
 8004342:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004346:	f89a 3000 	ldrb.w	r3, [sl]
 800434a:	2b2a      	cmp	r3, #42	; 0x2a
 800434c:	d015      	beq.n	800437a <_svfiprintf_r+0xf6>
 800434e:	9a07      	ldr	r2, [sp, #28]
 8004350:	4654      	mov	r4, sl
 8004352:	2000      	movs	r0, #0
 8004354:	f04f 0c0a 	mov.w	ip, #10
 8004358:	4621      	mov	r1, r4
 800435a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800435e:	3b30      	subs	r3, #48	; 0x30
 8004360:	2b09      	cmp	r3, #9
 8004362:	d94e      	bls.n	8004402 <_svfiprintf_r+0x17e>
 8004364:	b1b0      	cbz	r0, 8004394 <_svfiprintf_r+0x110>
 8004366:	9207      	str	r2, [sp, #28]
 8004368:	e014      	b.n	8004394 <_svfiprintf_r+0x110>
 800436a:	eba0 0308 	sub.w	r3, r0, r8
 800436e:	fa09 f303 	lsl.w	r3, r9, r3
 8004372:	4313      	orrs	r3, r2
 8004374:	9304      	str	r3, [sp, #16]
 8004376:	46a2      	mov	sl, r4
 8004378:	e7d2      	b.n	8004320 <_svfiprintf_r+0x9c>
 800437a:	9b03      	ldr	r3, [sp, #12]
 800437c:	1d19      	adds	r1, r3, #4
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	9103      	str	r1, [sp, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	bfbb      	ittet	lt
 8004386:	425b      	neglt	r3, r3
 8004388:	f042 0202 	orrlt.w	r2, r2, #2
 800438c:	9307      	strge	r3, [sp, #28]
 800438e:	9307      	strlt	r3, [sp, #28]
 8004390:	bfb8      	it	lt
 8004392:	9204      	strlt	r2, [sp, #16]
 8004394:	7823      	ldrb	r3, [r4, #0]
 8004396:	2b2e      	cmp	r3, #46	; 0x2e
 8004398:	d10c      	bne.n	80043b4 <_svfiprintf_r+0x130>
 800439a:	7863      	ldrb	r3, [r4, #1]
 800439c:	2b2a      	cmp	r3, #42	; 0x2a
 800439e:	d135      	bne.n	800440c <_svfiprintf_r+0x188>
 80043a0:	9b03      	ldr	r3, [sp, #12]
 80043a2:	1d1a      	adds	r2, r3, #4
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	9203      	str	r2, [sp, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bfb8      	it	lt
 80043ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80043b0:	3402      	adds	r4, #2
 80043b2:	9305      	str	r3, [sp, #20]
 80043b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004480 <_svfiprintf_r+0x1fc>
 80043b8:	7821      	ldrb	r1, [r4, #0]
 80043ba:	2203      	movs	r2, #3
 80043bc:	4650      	mov	r0, sl
 80043be:	f7fb ff07 	bl	80001d0 <memchr>
 80043c2:	b140      	cbz	r0, 80043d6 <_svfiprintf_r+0x152>
 80043c4:	2340      	movs	r3, #64	; 0x40
 80043c6:	eba0 000a 	sub.w	r0, r0, sl
 80043ca:	fa03 f000 	lsl.w	r0, r3, r0
 80043ce:	9b04      	ldr	r3, [sp, #16]
 80043d0:	4303      	orrs	r3, r0
 80043d2:	3401      	adds	r4, #1
 80043d4:	9304      	str	r3, [sp, #16]
 80043d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043da:	4826      	ldr	r0, [pc, #152]	; (8004474 <_svfiprintf_r+0x1f0>)
 80043dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043e0:	2206      	movs	r2, #6
 80043e2:	f7fb fef5 	bl	80001d0 <memchr>
 80043e6:	2800      	cmp	r0, #0
 80043e8:	d038      	beq.n	800445c <_svfiprintf_r+0x1d8>
 80043ea:	4b23      	ldr	r3, [pc, #140]	; (8004478 <_svfiprintf_r+0x1f4>)
 80043ec:	bb1b      	cbnz	r3, 8004436 <_svfiprintf_r+0x1b2>
 80043ee:	9b03      	ldr	r3, [sp, #12]
 80043f0:	3307      	adds	r3, #7
 80043f2:	f023 0307 	bic.w	r3, r3, #7
 80043f6:	3308      	adds	r3, #8
 80043f8:	9303      	str	r3, [sp, #12]
 80043fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043fc:	4433      	add	r3, r6
 80043fe:	9309      	str	r3, [sp, #36]	; 0x24
 8004400:	e767      	b.n	80042d2 <_svfiprintf_r+0x4e>
 8004402:	fb0c 3202 	mla	r2, ip, r2, r3
 8004406:	460c      	mov	r4, r1
 8004408:	2001      	movs	r0, #1
 800440a:	e7a5      	b.n	8004358 <_svfiprintf_r+0xd4>
 800440c:	2300      	movs	r3, #0
 800440e:	3401      	adds	r4, #1
 8004410:	9305      	str	r3, [sp, #20]
 8004412:	4619      	mov	r1, r3
 8004414:	f04f 0c0a 	mov.w	ip, #10
 8004418:	4620      	mov	r0, r4
 800441a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800441e:	3a30      	subs	r2, #48	; 0x30
 8004420:	2a09      	cmp	r2, #9
 8004422:	d903      	bls.n	800442c <_svfiprintf_r+0x1a8>
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0c5      	beq.n	80043b4 <_svfiprintf_r+0x130>
 8004428:	9105      	str	r1, [sp, #20]
 800442a:	e7c3      	b.n	80043b4 <_svfiprintf_r+0x130>
 800442c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004430:	4604      	mov	r4, r0
 8004432:	2301      	movs	r3, #1
 8004434:	e7f0      	b.n	8004418 <_svfiprintf_r+0x194>
 8004436:	ab03      	add	r3, sp, #12
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	462a      	mov	r2, r5
 800443c:	4b0f      	ldr	r3, [pc, #60]	; (800447c <_svfiprintf_r+0x1f8>)
 800443e:	a904      	add	r1, sp, #16
 8004440:	4638      	mov	r0, r7
 8004442:	f3af 8000 	nop.w
 8004446:	1c42      	adds	r2, r0, #1
 8004448:	4606      	mov	r6, r0
 800444a:	d1d6      	bne.n	80043fa <_svfiprintf_r+0x176>
 800444c:	89ab      	ldrh	r3, [r5, #12]
 800444e:	065b      	lsls	r3, r3, #25
 8004450:	f53f af2c 	bmi.w	80042ac <_svfiprintf_r+0x28>
 8004454:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004456:	b01d      	add	sp, #116	; 0x74
 8004458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800445c:	ab03      	add	r3, sp, #12
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	462a      	mov	r2, r5
 8004462:	4b06      	ldr	r3, [pc, #24]	; (800447c <_svfiprintf_r+0x1f8>)
 8004464:	a904      	add	r1, sp, #16
 8004466:	4638      	mov	r0, r7
 8004468:	f000 f87a 	bl	8004560 <_printf_i>
 800446c:	e7eb      	b.n	8004446 <_svfiprintf_r+0x1c2>
 800446e:	bf00      	nop
 8004470:	08004aec 	.word	0x08004aec
 8004474:	08004af6 	.word	0x08004af6
 8004478:	00000000 	.word	0x00000000
 800447c:	080041cd 	.word	0x080041cd
 8004480:	08004af2 	.word	0x08004af2

08004484 <_printf_common>:
 8004484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004488:	4616      	mov	r6, r2
 800448a:	4699      	mov	r9, r3
 800448c:	688a      	ldr	r2, [r1, #8]
 800448e:	690b      	ldr	r3, [r1, #16]
 8004490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004494:	4293      	cmp	r3, r2
 8004496:	bfb8      	it	lt
 8004498:	4613      	movlt	r3, r2
 800449a:	6033      	str	r3, [r6, #0]
 800449c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044a0:	4607      	mov	r7, r0
 80044a2:	460c      	mov	r4, r1
 80044a4:	b10a      	cbz	r2, 80044aa <_printf_common+0x26>
 80044a6:	3301      	adds	r3, #1
 80044a8:	6033      	str	r3, [r6, #0]
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	0699      	lsls	r1, r3, #26
 80044ae:	bf42      	ittt	mi
 80044b0:	6833      	ldrmi	r3, [r6, #0]
 80044b2:	3302      	addmi	r3, #2
 80044b4:	6033      	strmi	r3, [r6, #0]
 80044b6:	6825      	ldr	r5, [r4, #0]
 80044b8:	f015 0506 	ands.w	r5, r5, #6
 80044bc:	d106      	bne.n	80044cc <_printf_common+0x48>
 80044be:	f104 0a19 	add.w	sl, r4, #25
 80044c2:	68e3      	ldr	r3, [r4, #12]
 80044c4:	6832      	ldr	r2, [r6, #0]
 80044c6:	1a9b      	subs	r3, r3, r2
 80044c8:	42ab      	cmp	r3, r5
 80044ca:	dc26      	bgt.n	800451a <_printf_common+0x96>
 80044cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044d0:	1e13      	subs	r3, r2, #0
 80044d2:	6822      	ldr	r2, [r4, #0]
 80044d4:	bf18      	it	ne
 80044d6:	2301      	movne	r3, #1
 80044d8:	0692      	lsls	r2, r2, #26
 80044da:	d42b      	bmi.n	8004534 <_printf_common+0xb0>
 80044dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044e0:	4649      	mov	r1, r9
 80044e2:	4638      	mov	r0, r7
 80044e4:	47c0      	blx	r8
 80044e6:	3001      	adds	r0, #1
 80044e8:	d01e      	beq.n	8004528 <_printf_common+0xa4>
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	68e5      	ldr	r5, [r4, #12]
 80044ee:	6832      	ldr	r2, [r6, #0]
 80044f0:	f003 0306 	and.w	r3, r3, #6
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	bf08      	it	eq
 80044f8:	1aad      	subeq	r5, r5, r2
 80044fa:	68a3      	ldr	r3, [r4, #8]
 80044fc:	6922      	ldr	r2, [r4, #16]
 80044fe:	bf0c      	ite	eq
 8004500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004504:	2500      	movne	r5, #0
 8004506:	4293      	cmp	r3, r2
 8004508:	bfc4      	itt	gt
 800450a:	1a9b      	subgt	r3, r3, r2
 800450c:	18ed      	addgt	r5, r5, r3
 800450e:	2600      	movs	r6, #0
 8004510:	341a      	adds	r4, #26
 8004512:	42b5      	cmp	r5, r6
 8004514:	d11a      	bne.n	800454c <_printf_common+0xc8>
 8004516:	2000      	movs	r0, #0
 8004518:	e008      	b.n	800452c <_printf_common+0xa8>
 800451a:	2301      	movs	r3, #1
 800451c:	4652      	mov	r2, sl
 800451e:	4649      	mov	r1, r9
 8004520:	4638      	mov	r0, r7
 8004522:	47c0      	blx	r8
 8004524:	3001      	adds	r0, #1
 8004526:	d103      	bne.n	8004530 <_printf_common+0xac>
 8004528:	f04f 30ff 	mov.w	r0, #4294967295
 800452c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004530:	3501      	adds	r5, #1
 8004532:	e7c6      	b.n	80044c2 <_printf_common+0x3e>
 8004534:	18e1      	adds	r1, r4, r3
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	2030      	movs	r0, #48	; 0x30
 800453a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800453e:	4422      	add	r2, r4
 8004540:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004544:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004548:	3302      	adds	r3, #2
 800454a:	e7c7      	b.n	80044dc <_printf_common+0x58>
 800454c:	2301      	movs	r3, #1
 800454e:	4622      	mov	r2, r4
 8004550:	4649      	mov	r1, r9
 8004552:	4638      	mov	r0, r7
 8004554:	47c0      	blx	r8
 8004556:	3001      	adds	r0, #1
 8004558:	d0e6      	beq.n	8004528 <_printf_common+0xa4>
 800455a:	3601      	adds	r6, #1
 800455c:	e7d9      	b.n	8004512 <_printf_common+0x8e>
	...

08004560 <_printf_i>:
 8004560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004564:	7e0f      	ldrb	r7, [r1, #24]
 8004566:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004568:	2f78      	cmp	r7, #120	; 0x78
 800456a:	4691      	mov	r9, r2
 800456c:	4680      	mov	r8, r0
 800456e:	460c      	mov	r4, r1
 8004570:	469a      	mov	sl, r3
 8004572:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004576:	d807      	bhi.n	8004588 <_printf_i+0x28>
 8004578:	2f62      	cmp	r7, #98	; 0x62
 800457a:	d80a      	bhi.n	8004592 <_printf_i+0x32>
 800457c:	2f00      	cmp	r7, #0
 800457e:	f000 80d8 	beq.w	8004732 <_printf_i+0x1d2>
 8004582:	2f58      	cmp	r7, #88	; 0x58
 8004584:	f000 80a3 	beq.w	80046ce <_printf_i+0x16e>
 8004588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800458c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004590:	e03a      	b.n	8004608 <_printf_i+0xa8>
 8004592:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004596:	2b15      	cmp	r3, #21
 8004598:	d8f6      	bhi.n	8004588 <_printf_i+0x28>
 800459a:	a101      	add	r1, pc, #4	; (adr r1, 80045a0 <_printf_i+0x40>)
 800459c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045a0:	080045f9 	.word	0x080045f9
 80045a4:	0800460d 	.word	0x0800460d
 80045a8:	08004589 	.word	0x08004589
 80045ac:	08004589 	.word	0x08004589
 80045b0:	08004589 	.word	0x08004589
 80045b4:	08004589 	.word	0x08004589
 80045b8:	0800460d 	.word	0x0800460d
 80045bc:	08004589 	.word	0x08004589
 80045c0:	08004589 	.word	0x08004589
 80045c4:	08004589 	.word	0x08004589
 80045c8:	08004589 	.word	0x08004589
 80045cc:	08004719 	.word	0x08004719
 80045d0:	0800463d 	.word	0x0800463d
 80045d4:	080046fb 	.word	0x080046fb
 80045d8:	08004589 	.word	0x08004589
 80045dc:	08004589 	.word	0x08004589
 80045e0:	0800473b 	.word	0x0800473b
 80045e4:	08004589 	.word	0x08004589
 80045e8:	0800463d 	.word	0x0800463d
 80045ec:	08004589 	.word	0x08004589
 80045f0:	08004589 	.word	0x08004589
 80045f4:	08004703 	.word	0x08004703
 80045f8:	682b      	ldr	r3, [r5, #0]
 80045fa:	1d1a      	adds	r2, r3, #4
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	602a      	str	r2, [r5, #0]
 8004600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004608:	2301      	movs	r3, #1
 800460a:	e0a3      	b.n	8004754 <_printf_i+0x1f4>
 800460c:	6820      	ldr	r0, [r4, #0]
 800460e:	6829      	ldr	r1, [r5, #0]
 8004610:	0606      	lsls	r6, r0, #24
 8004612:	f101 0304 	add.w	r3, r1, #4
 8004616:	d50a      	bpl.n	800462e <_printf_i+0xce>
 8004618:	680e      	ldr	r6, [r1, #0]
 800461a:	602b      	str	r3, [r5, #0]
 800461c:	2e00      	cmp	r6, #0
 800461e:	da03      	bge.n	8004628 <_printf_i+0xc8>
 8004620:	232d      	movs	r3, #45	; 0x2d
 8004622:	4276      	negs	r6, r6
 8004624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004628:	485e      	ldr	r0, [pc, #376]	; (80047a4 <_printf_i+0x244>)
 800462a:	230a      	movs	r3, #10
 800462c:	e019      	b.n	8004662 <_printf_i+0x102>
 800462e:	680e      	ldr	r6, [r1, #0]
 8004630:	602b      	str	r3, [r5, #0]
 8004632:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004636:	bf18      	it	ne
 8004638:	b236      	sxthne	r6, r6
 800463a:	e7ef      	b.n	800461c <_printf_i+0xbc>
 800463c:	682b      	ldr	r3, [r5, #0]
 800463e:	6820      	ldr	r0, [r4, #0]
 8004640:	1d19      	adds	r1, r3, #4
 8004642:	6029      	str	r1, [r5, #0]
 8004644:	0601      	lsls	r1, r0, #24
 8004646:	d501      	bpl.n	800464c <_printf_i+0xec>
 8004648:	681e      	ldr	r6, [r3, #0]
 800464a:	e002      	b.n	8004652 <_printf_i+0xf2>
 800464c:	0646      	lsls	r6, r0, #25
 800464e:	d5fb      	bpl.n	8004648 <_printf_i+0xe8>
 8004650:	881e      	ldrh	r6, [r3, #0]
 8004652:	4854      	ldr	r0, [pc, #336]	; (80047a4 <_printf_i+0x244>)
 8004654:	2f6f      	cmp	r7, #111	; 0x6f
 8004656:	bf0c      	ite	eq
 8004658:	2308      	moveq	r3, #8
 800465a:	230a      	movne	r3, #10
 800465c:	2100      	movs	r1, #0
 800465e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004662:	6865      	ldr	r5, [r4, #4]
 8004664:	60a5      	str	r5, [r4, #8]
 8004666:	2d00      	cmp	r5, #0
 8004668:	bfa2      	ittt	ge
 800466a:	6821      	ldrge	r1, [r4, #0]
 800466c:	f021 0104 	bicge.w	r1, r1, #4
 8004670:	6021      	strge	r1, [r4, #0]
 8004672:	b90e      	cbnz	r6, 8004678 <_printf_i+0x118>
 8004674:	2d00      	cmp	r5, #0
 8004676:	d04d      	beq.n	8004714 <_printf_i+0x1b4>
 8004678:	4615      	mov	r5, r2
 800467a:	fbb6 f1f3 	udiv	r1, r6, r3
 800467e:	fb03 6711 	mls	r7, r3, r1, r6
 8004682:	5dc7      	ldrb	r7, [r0, r7]
 8004684:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004688:	4637      	mov	r7, r6
 800468a:	42bb      	cmp	r3, r7
 800468c:	460e      	mov	r6, r1
 800468e:	d9f4      	bls.n	800467a <_printf_i+0x11a>
 8004690:	2b08      	cmp	r3, #8
 8004692:	d10b      	bne.n	80046ac <_printf_i+0x14c>
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	07de      	lsls	r6, r3, #31
 8004698:	d508      	bpl.n	80046ac <_printf_i+0x14c>
 800469a:	6923      	ldr	r3, [r4, #16]
 800469c:	6861      	ldr	r1, [r4, #4]
 800469e:	4299      	cmp	r1, r3
 80046a0:	bfde      	ittt	le
 80046a2:	2330      	movle	r3, #48	; 0x30
 80046a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046ac:	1b52      	subs	r2, r2, r5
 80046ae:	6122      	str	r2, [r4, #16]
 80046b0:	f8cd a000 	str.w	sl, [sp]
 80046b4:	464b      	mov	r3, r9
 80046b6:	aa03      	add	r2, sp, #12
 80046b8:	4621      	mov	r1, r4
 80046ba:	4640      	mov	r0, r8
 80046bc:	f7ff fee2 	bl	8004484 <_printf_common>
 80046c0:	3001      	adds	r0, #1
 80046c2:	d14c      	bne.n	800475e <_printf_i+0x1fe>
 80046c4:	f04f 30ff 	mov.w	r0, #4294967295
 80046c8:	b004      	add	sp, #16
 80046ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ce:	4835      	ldr	r0, [pc, #212]	; (80047a4 <_printf_i+0x244>)
 80046d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80046d4:	6829      	ldr	r1, [r5, #0]
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80046dc:	6029      	str	r1, [r5, #0]
 80046de:	061d      	lsls	r5, r3, #24
 80046e0:	d514      	bpl.n	800470c <_printf_i+0x1ac>
 80046e2:	07df      	lsls	r7, r3, #31
 80046e4:	bf44      	itt	mi
 80046e6:	f043 0320 	orrmi.w	r3, r3, #32
 80046ea:	6023      	strmi	r3, [r4, #0]
 80046ec:	b91e      	cbnz	r6, 80046f6 <_printf_i+0x196>
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	f023 0320 	bic.w	r3, r3, #32
 80046f4:	6023      	str	r3, [r4, #0]
 80046f6:	2310      	movs	r3, #16
 80046f8:	e7b0      	b.n	800465c <_printf_i+0xfc>
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	f043 0320 	orr.w	r3, r3, #32
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	2378      	movs	r3, #120	; 0x78
 8004704:	4828      	ldr	r0, [pc, #160]	; (80047a8 <_printf_i+0x248>)
 8004706:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800470a:	e7e3      	b.n	80046d4 <_printf_i+0x174>
 800470c:	0659      	lsls	r1, r3, #25
 800470e:	bf48      	it	mi
 8004710:	b2b6      	uxthmi	r6, r6
 8004712:	e7e6      	b.n	80046e2 <_printf_i+0x182>
 8004714:	4615      	mov	r5, r2
 8004716:	e7bb      	b.n	8004690 <_printf_i+0x130>
 8004718:	682b      	ldr	r3, [r5, #0]
 800471a:	6826      	ldr	r6, [r4, #0]
 800471c:	6961      	ldr	r1, [r4, #20]
 800471e:	1d18      	adds	r0, r3, #4
 8004720:	6028      	str	r0, [r5, #0]
 8004722:	0635      	lsls	r5, r6, #24
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	d501      	bpl.n	800472c <_printf_i+0x1cc>
 8004728:	6019      	str	r1, [r3, #0]
 800472a:	e002      	b.n	8004732 <_printf_i+0x1d2>
 800472c:	0670      	lsls	r0, r6, #25
 800472e:	d5fb      	bpl.n	8004728 <_printf_i+0x1c8>
 8004730:	8019      	strh	r1, [r3, #0]
 8004732:	2300      	movs	r3, #0
 8004734:	6123      	str	r3, [r4, #16]
 8004736:	4615      	mov	r5, r2
 8004738:	e7ba      	b.n	80046b0 <_printf_i+0x150>
 800473a:	682b      	ldr	r3, [r5, #0]
 800473c:	1d1a      	adds	r2, r3, #4
 800473e:	602a      	str	r2, [r5, #0]
 8004740:	681d      	ldr	r5, [r3, #0]
 8004742:	6862      	ldr	r2, [r4, #4]
 8004744:	2100      	movs	r1, #0
 8004746:	4628      	mov	r0, r5
 8004748:	f7fb fd42 	bl	80001d0 <memchr>
 800474c:	b108      	cbz	r0, 8004752 <_printf_i+0x1f2>
 800474e:	1b40      	subs	r0, r0, r5
 8004750:	6060      	str	r0, [r4, #4]
 8004752:	6863      	ldr	r3, [r4, #4]
 8004754:	6123      	str	r3, [r4, #16]
 8004756:	2300      	movs	r3, #0
 8004758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800475c:	e7a8      	b.n	80046b0 <_printf_i+0x150>
 800475e:	6923      	ldr	r3, [r4, #16]
 8004760:	462a      	mov	r2, r5
 8004762:	4649      	mov	r1, r9
 8004764:	4640      	mov	r0, r8
 8004766:	47d0      	blx	sl
 8004768:	3001      	adds	r0, #1
 800476a:	d0ab      	beq.n	80046c4 <_printf_i+0x164>
 800476c:	6823      	ldr	r3, [r4, #0]
 800476e:	079b      	lsls	r3, r3, #30
 8004770:	d413      	bmi.n	800479a <_printf_i+0x23a>
 8004772:	68e0      	ldr	r0, [r4, #12]
 8004774:	9b03      	ldr	r3, [sp, #12]
 8004776:	4298      	cmp	r0, r3
 8004778:	bfb8      	it	lt
 800477a:	4618      	movlt	r0, r3
 800477c:	e7a4      	b.n	80046c8 <_printf_i+0x168>
 800477e:	2301      	movs	r3, #1
 8004780:	4632      	mov	r2, r6
 8004782:	4649      	mov	r1, r9
 8004784:	4640      	mov	r0, r8
 8004786:	47d0      	blx	sl
 8004788:	3001      	adds	r0, #1
 800478a:	d09b      	beq.n	80046c4 <_printf_i+0x164>
 800478c:	3501      	adds	r5, #1
 800478e:	68e3      	ldr	r3, [r4, #12]
 8004790:	9903      	ldr	r1, [sp, #12]
 8004792:	1a5b      	subs	r3, r3, r1
 8004794:	42ab      	cmp	r3, r5
 8004796:	dcf2      	bgt.n	800477e <_printf_i+0x21e>
 8004798:	e7eb      	b.n	8004772 <_printf_i+0x212>
 800479a:	2500      	movs	r5, #0
 800479c:	f104 0619 	add.w	r6, r4, #25
 80047a0:	e7f5      	b.n	800478e <_printf_i+0x22e>
 80047a2:	bf00      	nop
 80047a4:	08004afd 	.word	0x08004afd
 80047a8:	08004b0e 	.word	0x08004b0e

080047ac <memcpy>:
 80047ac:	440a      	add	r2, r1
 80047ae:	4291      	cmp	r1, r2
 80047b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80047b4:	d100      	bne.n	80047b8 <memcpy+0xc>
 80047b6:	4770      	bx	lr
 80047b8:	b510      	push	{r4, lr}
 80047ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047c2:	4291      	cmp	r1, r2
 80047c4:	d1f9      	bne.n	80047ba <memcpy+0xe>
 80047c6:	bd10      	pop	{r4, pc}

080047c8 <memmove>:
 80047c8:	4288      	cmp	r0, r1
 80047ca:	b510      	push	{r4, lr}
 80047cc:	eb01 0402 	add.w	r4, r1, r2
 80047d0:	d902      	bls.n	80047d8 <memmove+0x10>
 80047d2:	4284      	cmp	r4, r0
 80047d4:	4623      	mov	r3, r4
 80047d6:	d807      	bhi.n	80047e8 <memmove+0x20>
 80047d8:	1e43      	subs	r3, r0, #1
 80047da:	42a1      	cmp	r1, r4
 80047dc:	d008      	beq.n	80047f0 <memmove+0x28>
 80047de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047e6:	e7f8      	b.n	80047da <memmove+0x12>
 80047e8:	4402      	add	r2, r0
 80047ea:	4601      	mov	r1, r0
 80047ec:	428a      	cmp	r2, r1
 80047ee:	d100      	bne.n	80047f2 <memmove+0x2a>
 80047f0:	bd10      	pop	{r4, pc}
 80047f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047fa:	e7f7      	b.n	80047ec <memmove+0x24>

080047fc <_free_r>:
 80047fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047fe:	2900      	cmp	r1, #0
 8004800:	d044      	beq.n	800488c <_free_r+0x90>
 8004802:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004806:	9001      	str	r0, [sp, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	f1a1 0404 	sub.w	r4, r1, #4
 800480e:	bfb8      	it	lt
 8004810:	18e4      	addlt	r4, r4, r3
 8004812:	f000 f913 	bl	8004a3c <__malloc_lock>
 8004816:	4a1e      	ldr	r2, [pc, #120]	; (8004890 <_free_r+0x94>)
 8004818:	9801      	ldr	r0, [sp, #4]
 800481a:	6813      	ldr	r3, [r2, #0]
 800481c:	b933      	cbnz	r3, 800482c <_free_r+0x30>
 800481e:	6063      	str	r3, [r4, #4]
 8004820:	6014      	str	r4, [r2, #0]
 8004822:	b003      	add	sp, #12
 8004824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004828:	f000 b90e 	b.w	8004a48 <__malloc_unlock>
 800482c:	42a3      	cmp	r3, r4
 800482e:	d908      	bls.n	8004842 <_free_r+0x46>
 8004830:	6825      	ldr	r5, [r4, #0]
 8004832:	1961      	adds	r1, r4, r5
 8004834:	428b      	cmp	r3, r1
 8004836:	bf01      	itttt	eq
 8004838:	6819      	ldreq	r1, [r3, #0]
 800483a:	685b      	ldreq	r3, [r3, #4]
 800483c:	1949      	addeq	r1, r1, r5
 800483e:	6021      	streq	r1, [r4, #0]
 8004840:	e7ed      	b.n	800481e <_free_r+0x22>
 8004842:	461a      	mov	r2, r3
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	b10b      	cbz	r3, 800484c <_free_r+0x50>
 8004848:	42a3      	cmp	r3, r4
 800484a:	d9fa      	bls.n	8004842 <_free_r+0x46>
 800484c:	6811      	ldr	r1, [r2, #0]
 800484e:	1855      	adds	r5, r2, r1
 8004850:	42a5      	cmp	r5, r4
 8004852:	d10b      	bne.n	800486c <_free_r+0x70>
 8004854:	6824      	ldr	r4, [r4, #0]
 8004856:	4421      	add	r1, r4
 8004858:	1854      	adds	r4, r2, r1
 800485a:	42a3      	cmp	r3, r4
 800485c:	6011      	str	r1, [r2, #0]
 800485e:	d1e0      	bne.n	8004822 <_free_r+0x26>
 8004860:	681c      	ldr	r4, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	6053      	str	r3, [r2, #4]
 8004866:	4421      	add	r1, r4
 8004868:	6011      	str	r1, [r2, #0]
 800486a:	e7da      	b.n	8004822 <_free_r+0x26>
 800486c:	d902      	bls.n	8004874 <_free_r+0x78>
 800486e:	230c      	movs	r3, #12
 8004870:	6003      	str	r3, [r0, #0]
 8004872:	e7d6      	b.n	8004822 <_free_r+0x26>
 8004874:	6825      	ldr	r5, [r4, #0]
 8004876:	1961      	adds	r1, r4, r5
 8004878:	428b      	cmp	r3, r1
 800487a:	bf04      	itt	eq
 800487c:	6819      	ldreq	r1, [r3, #0]
 800487e:	685b      	ldreq	r3, [r3, #4]
 8004880:	6063      	str	r3, [r4, #4]
 8004882:	bf04      	itt	eq
 8004884:	1949      	addeq	r1, r1, r5
 8004886:	6021      	streq	r1, [r4, #0]
 8004888:	6054      	str	r4, [r2, #4]
 800488a:	e7ca      	b.n	8004822 <_free_r+0x26>
 800488c:	b003      	add	sp, #12
 800488e:	bd30      	pop	{r4, r5, pc}
 8004890:	200003d8 	.word	0x200003d8

08004894 <sbrk_aligned>:
 8004894:	b570      	push	{r4, r5, r6, lr}
 8004896:	4e0e      	ldr	r6, [pc, #56]	; (80048d0 <sbrk_aligned+0x3c>)
 8004898:	460c      	mov	r4, r1
 800489a:	6831      	ldr	r1, [r6, #0]
 800489c:	4605      	mov	r5, r0
 800489e:	b911      	cbnz	r1, 80048a6 <sbrk_aligned+0x12>
 80048a0:	f000 f8bc 	bl	8004a1c <_sbrk_r>
 80048a4:	6030      	str	r0, [r6, #0]
 80048a6:	4621      	mov	r1, r4
 80048a8:	4628      	mov	r0, r5
 80048aa:	f000 f8b7 	bl	8004a1c <_sbrk_r>
 80048ae:	1c43      	adds	r3, r0, #1
 80048b0:	d00a      	beq.n	80048c8 <sbrk_aligned+0x34>
 80048b2:	1cc4      	adds	r4, r0, #3
 80048b4:	f024 0403 	bic.w	r4, r4, #3
 80048b8:	42a0      	cmp	r0, r4
 80048ba:	d007      	beq.n	80048cc <sbrk_aligned+0x38>
 80048bc:	1a21      	subs	r1, r4, r0
 80048be:	4628      	mov	r0, r5
 80048c0:	f000 f8ac 	bl	8004a1c <_sbrk_r>
 80048c4:	3001      	adds	r0, #1
 80048c6:	d101      	bne.n	80048cc <sbrk_aligned+0x38>
 80048c8:	f04f 34ff 	mov.w	r4, #4294967295
 80048cc:	4620      	mov	r0, r4
 80048ce:	bd70      	pop	{r4, r5, r6, pc}
 80048d0:	200003dc 	.word	0x200003dc

080048d4 <_malloc_r>:
 80048d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d8:	1ccd      	adds	r5, r1, #3
 80048da:	f025 0503 	bic.w	r5, r5, #3
 80048de:	3508      	adds	r5, #8
 80048e0:	2d0c      	cmp	r5, #12
 80048e2:	bf38      	it	cc
 80048e4:	250c      	movcc	r5, #12
 80048e6:	2d00      	cmp	r5, #0
 80048e8:	4607      	mov	r7, r0
 80048ea:	db01      	blt.n	80048f0 <_malloc_r+0x1c>
 80048ec:	42a9      	cmp	r1, r5
 80048ee:	d905      	bls.n	80048fc <_malloc_r+0x28>
 80048f0:	230c      	movs	r3, #12
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	2600      	movs	r6, #0
 80048f6:	4630      	mov	r0, r6
 80048f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048fc:	4e2e      	ldr	r6, [pc, #184]	; (80049b8 <_malloc_r+0xe4>)
 80048fe:	f000 f89d 	bl	8004a3c <__malloc_lock>
 8004902:	6833      	ldr	r3, [r6, #0]
 8004904:	461c      	mov	r4, r3
 8004906:	bb34      	cbnz	r4, 8004956 <_malloc_r+0x82>
 8004908:	4629      	mov	r1, r5
 800490a:	4638      	mov	r0, r7
 800490c:	f7ff ffc2 	bl	8004894 <sbrk_aligned>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	4604      	mov	r4, r0
 8004914:	d14d      	bne.n	80049b2 <_malloc_r+0xde>
 8004916:	6834      	ldr	r4, [r6, #0]
 8004918:	4626      	mov	r6, r4
 800491a:	2e00      	cmp	r6, #0
 800491c:	d140      	bne.n	80049a0 <_malloc_r+0xcc>
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	4631      	mov	r1, r6
 8004922:	4638      	mov	r0, r7
 8004924:	eb04 0803 	add.w	r8, r4, r3
 8004928:	f000 f878 	bl	8004a1c <_sbrk_r>
 800492c:	4580      	cmp	r8, r0
 800492e:	d13a      	bne.n	80049a6 <_malloc_r+0xd2>
 8004930:	6821      	ldr	r1, [r4, #0]
 8004932:	3503      	adds	r5, #3
 8004934:	1a6d      	subs	r5, r5, r1
 8004936:	f025 0503 	bic.w	r5, r5, #3
 800493a:	3508      	adds	r5, #8
 800493c:	2d0c      	cmp	r5, #12
 800493e:	bf38      	it	cc
 8004940:	250c      	movcc	r5, #12
 8004942:	4629      	mov	r1, r5
 8004944:	4638      	mov	r0, r7
 8004946:	f7ff ffa5 	bl	8004894 <sbrk_aligned>
 800494a:	3001      	adds	r0, #1
 800494c:	d02b      	beq.n	80049a6 <_malloc_r+0xd2>
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	442b      	add	r3, r5
 8004952:	6023      	str	r3, [r4, #0]
 8004954:	e00e      	b.n	8004974 <_malloc_r+0xa0>
 8004956:	6822      	ldr	r2, [r4, #0]
 8004958:	1b52      	subs	r2, r2, r5
 800495a:	d41e      	bmi.n	800499a <_malloc_r+0xc6>
 800495c:	2a0b      	cmp	r2, #11
 800495e:	d916      	bls.n	800498e <_malloc_r+0xba>
 8004960:	1961      	adds	r1, r4, r5
 8004962:	42a3      	cmp	r3, r4
 8004964:	6025      	str	r5, [r4, #0]
 8004966:	bf18      	it	ne
 8004968:	6059      	strne	r1, [r3, #4]
 800496a:	6863      	ldr	r3, [r4, #4]
 800496c:	bf08      	it	eq
 800496e:	6031      	streq	r1, [r6, #0]
 8004970:	5162      	str	r2, [r4, r5]
 8004972:	604b      	str	r3, [r1, #4]
 8004974:	4638      	mov	r0, r7
 8004976:	f104 060b 	add.w	r6, r4, #11
 800497a:	f000 f865 	bl	8004a48 <__malloc_unlock>
 800497e:	f026 0607 	bic.w	r6, r6, #7
 8004982:	1d23      	adds	r3, r4, #4
 8004984:	1af2      	subs	r2, r6, r3
 8004986:	d0b6      	beq.n	80048f6 <_malloc_r+0x22>
 8004988:	1b9b      	subs	r3, r3, r6
 800498a:	50a3      	str	r3, [r4, r2]
 800498c:	e7b3      	b.n	80048f6 <_malloc_r+0x22>
 800498e:	6862      	ldr	r2, [r4, #4]
 8004990:	42a3      	cmp	r3, r4
 8004992:	bf0c      	ite	eq
 8004994:	6032      	streq	r2, [r6, #0]
 8004996:	605a      	strne	r2, [r3, #4]
 8004998:	e7ec      	b.n	8004974 <_malloc_r+0xa0>
 800499a:	4623      	mov	r3, r4
 800499c:	6864      	ldr	r4, [r4, #4]
 800499e:	e7b2      	b.n	8004906 <_malloc_r+0x32>
 80049a0:	4634      	mov	r4, r6
 80049a2:	6876      	ldr	r6, [r6, #4]
 80049a4:	e7b9      	b.n	800491a <_malloc_r+0x46>
 80049a6:	230c      	movs	r3, #12
 80049a8:	603b      	str	r3, [r7, #0]
 80049aa:	4638      	mov	r0, r7
 80049ac:	f000 f84c 	bl	8004a48 <__malloc_unlock>
 80049b0:	e7a1      	b.n	80048f6 <_malloc_r+0x22>
 80049b2:	6025      	str	r5, [r4, #0]
 80049b4:	e7de      	b.n	8004974 <_malloc_r+0xa0>
 80049b6:	bf00      	nop
 80049b8:	200003d8 	.word	0x200003d8

080049bc <_realloc_r>:
 80049bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049c0:	4680      	mov	r8, r0
 80049c2:	4614      	mov	r4, r2
 80049c4:	460e      	mov	r6, r1
 80049c6:	b921      	cbnz	r1, 80049d2 <_realloc_r+0x16>
 80049c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049cc:	4611      	mov	r1, r2
 80049ce:	f7ff bf81 	b.w	80048d4 <_malloc_r>
 80049d2:	b92a      	cbnz	r2, 80049e0 <_realloc_r+0x24>
 80049d4:	f7ff ff12 	bl	80047fc <_free_r>
 80049d8:	4625      	mov	r5, r4
 80049da:	4628      	mov	r0, r5
 80049dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049e0:	f000 f838 	bl	8004a54 <_malloc_usable_size_r>
 80049e4:	4284      	cmp	r4, r0
 80049e6:	4607      	mov	r7, r0
 80049e8:	d802      	bhi.n	80049f0 <_realloc_r+0x34>
 80049ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049ee:	d812      	bhi.n	8004a16 <_realloc_r+0x5a>
 80049f0:	4621      	mov	r1, r4
 80049f2:	4640      	mov	r0, r8
 80049f4:	f7ff ff6e 	bl	80048d4 <_malloc_r>
 80049f8:	4605      	mov	r5, r0
 80049fa:	2800      	cmp	r0, #0
 80049fc:	d0ed      	beq.n	80049da <_realloc_r+0x1e>
 80049fe:	42bc      	cmp	r4, r7
 8004a00:	4622      	mov	r2, r4
 8004a02:	4631      	mov	r1, r6
 8004a04:	bf28      	it	cs
 8004a06:	463a      	movcs	r2, r7
 8004a08:	f7ff fed0 	bl	80047ac <memcpy>
 8004a0c:	4631      	mov	r1, r6
 8004a0e:	4640      	mov	r0, r8
 8004a10:	f7ff fef4 	bl	80047fc <_free_r>
 8004a14:	e7e1      	b.n	80049da <_realloc_r+0x1e>
 8004a16:	4635      	mov	r5, r6
 8004a18:	e7df      	b.n	80049da <_realloc_r+0x1e>
	...

08004a1c <_sbrk_r>:
 8004a1c:	b538      	push	{r3, r4, r5, lr}
 8004a1e:	4d06      	ldr	r5, [pc, #24]	; (8004a38 <_sbrk_r+0x1c>)
 8004a20:	2300      	movs	r3, #0
 8004a22:	4604      	mov	r4, r0
 8004a24:	4608      	mov	r0, r1
 8004a26:	602b      	str	r3, [r5, #0]
 8004a28:	f7fc fabe 	bl	8000fa8 <_sbrk>
 8004a2c:	1c43      	adds	r3, r0, #1
 8004a2e:	d102      	bne.n	8004a36 <_sbrk_r+0x1a>
 8004a30:	682b      	ldr	r3, [r5, #0]
 8004a32:	b103      	cbz	r3, 8004a36 <_sbrk_r+0x1a>
 8004a34:	6023      	str	r3, [r4, #0]
 8004a36:	bd38      	pop	{r3, r4, r5, pc}
 8004a38:	200003e0 	.word	0x200003e0

08004a3c <__malloc_lock>:
 8004a3c:	4801      	ldr	r0, [pc, #4]	; (8004a44 <__malloc_lock+0x8>)
 8004a3e:	f000 b811 	b.w	8004a64 <__retarget_lock_acquire_recursive>
 8004a42:	bf00      	nop
 8004a44:	200003e4 	.word	0x200003e4

08004a48 <__malloc_unlock>:
 8004a48:	4801      	ldr	r0, [pc, #4]	; (8004a50 <__malloc_unlock+0x8>)
 8004a4a:	f000 b80c 	b.w	8004a66 <__retarget_lock_release_recursive>
 8004a4e:	bf00      	nop
 8004a50:	200003e4 	.word	0x200003e4

08004a54 <_malloc_usable_size_r>:
 8004a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a58:	1f18      	subs	r0, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	bfbc      	itt	lt
 8004a5e:	580b      	ldrlt	r3, [r1, r0]
 8004a60:	18c0      	addlt	r0, r0, r3
 8004a62:	4770      	bx	lr

08004a64 <__retarget_lock_acquire_recursive>:
 8004a64:	4770      	bx	lr

08004a66 <__retarget_lock_release_recursive>:
 8004a66:	4770      	bx	lr

08004a68 <_init>:
 8004a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6a:	bf00      	nop
 8004a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6e:	bc08      	pop	{r3}
 8004a70:	469e      	mov	lr, r3
 8004a72:	4770      	bx	lr

08004a74 <_fini>:
 8004a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a76:	bf00      	nop
 8004a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a7a:	bc08      	pop	{r3}
 8004a7c:	469e      	mov	lr, r3
 8004a7e:	4770      	bx	lr
